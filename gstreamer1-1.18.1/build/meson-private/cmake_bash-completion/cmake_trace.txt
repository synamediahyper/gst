/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(2):  cmake_minimum_required(VERSION 3.16.3 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(3):  project(MesonTemp LANGUAGES C )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(34):  if(CMAKE_HOST_UNIX )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(35):  find_program(CMAKE_UNAME uname /bin /usr/bin /usr/local/bin )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(36):  if(CMAKE_UNAME )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(37):  if(CMAKE_HOST_SYSTEM_NAME STREQUAL AIX )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(43):  else()
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(44):  exec_program(/usr/bin/uname ARGS -r OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_VERSION )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(46):  if(CMAKE_HOST_SYSTEM_NAME MATCHES Linux|CYGWIN.*|Darwin|^GNU$ )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(47):  exec_program(/usr/bin/uname ARGS -m OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_PROCESSOR RETURN_VALUE val )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(49):  if(CMAKE_HOST_SYSTEM_NAME STREQUAL Darwin AND CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL Power Macintosh )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(66):  if(0 GREATER 0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(69):  set(CMAKE_UNAME /usr/bin/uname CACHE INTERNAL uname command )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(71):  string(REPLACE "  CMAKE_HOST_SYSTEM_PROCESSOR x86_64 )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(72):  string(REPLACE / _ CMAKE_HOST_SYSTEM_PROCESSOR x86_64 )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(88):  if(CMAKE_TOOLCHAIN_FILE )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(90):  include(/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion//home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake OPTIONAL RESULT_VARIABLE _INCLUDED_TOOLCHAIN_FILE )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(91):  if(NOT _INCLUDED_TOOLCHAIN_FILE )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(93):  include(/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake OPTIONAL RESULT_VARIABLE _INCLUDED_TOOLCHAIN_FILE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(9):  if(DEFINED MESON_PRELOAD_FILE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(14):  set(CMAKE_SYSTEM_NAME Linux )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(15):  set(CMAKE_SYSTEM_PROCESSOR csky )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(16):  set(CMAKE_SIZEOF_VOID_P 4 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(17):  set(CMAKE_SYSROOT /home/user/hyperscale/buildroot/output/host/csky-buildroot-linux-uclibcabiv1/sysroot )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(18):  set(CMAKE_C_COMPILER /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(19):  set(CMAKE_C_COMPILER_ID GNU )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(20):  set(CMAKE_C_COMPILER_VERSION 6.3.0 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(21):  set(CMAKE_C_COMPILER_FORCED 1 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(22):  set(CMAKE_C_COMPILER_WORKS TRUE )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(96):  if(_INCLUDED_TOOLCHAIN_FILE )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(97):  set(CMAKE_TOOLCHAIN_FILE /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake CACHE FILEPATH The CMake toolchain file FORCE )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(108):  if(CMAKE_SYSTEM_NAME )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(109):  if(NOT DEFINED CMAKE_CROSSCOMPILING )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(110):  set(CMAKE_CROSSCOMPILING TRUE )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(112):  set(PRESET_CMAKE_SYSTEM_NAME TRUE )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(129):  include(Platform/Linux-Determine OPTIONAL )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(131):  macro(ADJUST_CMAKE_SYSTEM_VARIABLES _PREFIX )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(160):  ADJUST_CMAKE_SYSTEM_VARIABLES(CMAKE_SYSTEM )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(132):  if(NOT CMAKE_SYSTEM_NAME )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(137):  if(CMAKE_SYSTEM_NAME MATCHES BSD.OS )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(142):  if(CMAKE_SYSTEM_NAME MATCHES kFreeBSD )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(147):  if(CMAKE_SYSTEM_NAME MATCHES CYGWIN )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(152):  set(CMAKE_SYSTEM Linux )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(154):  if(CMAKE_SYSTEM_VERSION )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(161):  ADJUST_CMAKE_SYSTEM_VARIABLES(CMAKE_HOST_SYSTEM )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(132):  if(NOT CMAKE_HOST_SYSTEM_NAME )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(137):  if(CMAKE_HOST_SYSTEM_NAME MATCHES BSD.OS )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(142):  if(CMAKE_HOST_SYSTEM_NAME MATCHES kFreeBSD )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(147):  if(CMAKE_HOST_SYSTEM_NAME MATCHES CYGWIN )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(152):  set(CMAKE_HOST_SYSTEM Linux )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(154):  if(CMAKE_HOST_SYSTEM_VERSION )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(155):  set(CMAKE_HOST_SYSTEM Linux-5.4.0-56-generic )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(165):  if(CMAKE_BINARY_DIR )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(167):  if(PRESET_CMAKE_SYSTEM_NAME )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(168):  file(APPEND /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/CMakeOutput.log The target system is: Linux -  - csky
 )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(170):  file(APPEND /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/CMakeOutput.log The host system is: Linux - 5.4.0-56-generic - x86_64
 )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(179):  set(INCLUDE_CMAKE_TOOLCHAIN_FILE_IF_REQUIRED )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(180):  if(CMAKE_TOOLCHAIN_FILE )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(181):  set(INCLUDE_CMAKE_TOOLCHAIN_FILE_IF_REQUIRED include("/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake") )
/usr/share/cmake-3.16/Modules/CMakeDetermineSystem.cmake(185):  configure_file(/usr/share/cmake-3.16/Modules/CMakeSystem.cmake.in /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake @ONLY )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(1):  set(CMAKE_HOST_SYSTEM Linux-5.4.0-56-generic )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(2):  set(CMAKE_HOST_SYSTEM_NAME Linux )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(3):  set(CMAKE_HOST_SYSTEM_VERSION 5.4.0-56-generic )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(4):  set(CMAKE_HOST_SYSTEM_PROCESSOR x86_64 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(6):  include(/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(9):  if(DEFINED MESON_PRELOAD_FILE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(14):  set(CMAKE_SYSTEM_NAME Linux )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(15):  set(CMAKE_SYSTEM_PROCESSOR csky )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(16):  set(CMAKE_SIZEOF_VOID_P 4 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(17):  set(CMAKE_SYSROOT /home/user/hyperscale/buildroot/output/host/csky-buildroot-linux-uclibcabiv1/sysroot )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(18):  set(CMAKE_C_COMPILER /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(19):  set(CMAKE_C_COMPILER_ID GNU )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(20):  set(CMAKE_C_COMPILER_VERSION 6.3.0 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(21):  set(CMAKE_C_COMPILER_FORCED 1 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeMesonToolchainFile.cmake(22):  set(CMAKE_C_COMPILER_WORKS TRUE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(8):  set(CMAKE_SYSTEM Linux )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(9):  set(CMAKE_SYSTEM_NAME Linux )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(10):  set(CMAKE_SYSTEM_VERSION  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(11):  set(CMAKE_SYSTEM_PROCESSOR csky )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(13):  set(CMAKE_CROSSCOMPILING TRUE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeSystem.cmake(15):  set(CMAKE_SYSTEM_LOADED 1 )
/usr/share/cmake-3.16/Modules/CMakeUnixFindMake.cmake(5):  find_program(CMAKE_MAKE_PROGRAM NAMES gmake make smake )
/usr/share/cmake-3.16/Modules/CMakeUnixFindMake.cmake(6):  mark_as_advanced(CMAKE_MAKE_PROGRAM )
/usr/share/cmake-3.16/Modules/CMakeUnixFindMake.cmake(9):  if(NOT CMAKE_MAKE_PROGRAM AND CMAKE_HOST_APPLE )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInitialize.cmake(19):  set(CMAKE_EFFECTIVE_SYSTEM_NAME Linux )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInitialize.cmake(21):  include(Platform/Linux-Initialize OPTIONAL )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInitialize.cmake(23):  set(CMAKE_SYSTEM_SPECIFIC_INITIALIZE_LOADED 1 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(24):  include(/usr/share/cmake-3.16/Modules/CMakeDetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompiler.cmake(5):  macro(_cmake_find_compiler lang )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompiler.cmake(92):  macro(_cmake_find_compiler_path lang )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(27):  include(Platform/Linux-Determine-C OPTIONAL )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(28):  include(Platform/Linux-C OPTIONAL )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(29):  if(NOT CMAKE_C_COMPILER_NAMES )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(30):  set(CMAKE_C_COMPILER_NAMES cc )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(33):  if(Unix Makefiles MATCHES Visual Studio )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(34):  elseif(Unix Makefiles MATCHES Green Hills MULTI )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(35):  elseif(Unix Makefiles MATCHES Xcode )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(38):  else()
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(39):  if(NOT CMAKE_C_COMPILER )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(67):  else()
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(68):  _cmake_find_compiler_path(C )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompiler.cmake(93):  if(CMAKE_C_COMPILER )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompiler.cmake(98):  list(LENGTH CMAKE_C_COMPILER _CMAKE_C_COMPILER_LIST_LENGTH )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompiler.cmake(99):  if(1 EQUAL 2 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompiler.cmake(103):  unset(_CMAKE_C_COMPILER_LIST_LENGTH )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompiler.cmake(106):  get_filename_component(_CMAKE_USER_C_COMPILER_PATH /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc PATH )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompiler.cmake(107):  if(NOT _CMAKE_USER_C_COMPILER_PATH )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(70):  mark_as_advanced(CMAKE_C_COMPILER )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(75):  set(CMAKE_C_COMPILER_ID_TEST_FLAGS_FIRST )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(76):  set(CMAKE_C_COMPILER_ID_TEST_FLAGS -c -Aa -D__CLASSIC_C__ --target=arm-arm-none-eabi -mcpu=cortex-m3 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(92):  if(NOT CMAKE_C_COMPILER_ID_RUN )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(93):  set(CMAKE_C_COMPILER_ID_RUN 1 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(96):  set(CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(97):  set(CMAKE_C_PLATFORM_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(98):  file(READ /usr/share/cmake-3.16/Modules/CMakePlatformId.h.in CMAKE_C_COMPILER_ID_PLATFORM_CONTENT )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(103):  list(APPEND CMAKE_C_COMPILER_ID_VENDORS IAR )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(104):  set(CMAKE_C_COMPILER_ID_VENDOR_FLAGS_IAR )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(105):  set(CMAKE_C_COMPILER_ID_VENDOR_REGEX_IAR IAR .+ Compiler )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(112):  set(CMAKE_C_COMPILER_ID_TOOL_MATCH_REGEX 
Ld[^
]*(
[ 	]+[^
]*)*
[ 	]+([^ 	
]+)[^
]*-o[^
]*CompilerIdC/(\./)?(CompilerIdC.(framework|xctest)/)?CompilerIdC[ 	
\"] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(113):  set(CMAKE_C_COMPILER_ID_TOOL_MATCH_INDEX 2 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(115):  include(/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(9):  function(CMAKE_DETERMINE_COMPILER_ID lang flagvar src )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(203):  include(CMakeCompilerIdDetection )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(5):  function(_readFile file )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(14):  function(compiler_id_detection outvar lang )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(207):  function(CMAKE_DETERMINE_COMPILER_ID_WRITE lang src )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(225):  function(CMAKE_DETERMINE_COMPILER_ID_BUILD lang testflags userflags src )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(617):  function(CMAKE_DETERMINE_COMPILER_ID_MATCH_VENDOR lang output )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(628):  function(CMAKE_DETERMINE_COMPILER_ID_CHECK lang file )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(840):  function(CMAKE_DETERMINE_COMPILER_ID_VENDOR lang userflags )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(887):  function(CMAKE_DETERMINE_MSVC_SHOWINCLUDES_PREFIX lang userflags )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(116):  CMAKE_DETERMINE_COMPILER_ID(C CFLAGS CMakeCCompilerId.c )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(11):  string(STRIP  CMAKE_C_COMPILER_ID_ARG1 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(12):  string(REGEX REPLACE  + ; CMAKE_C_COMPILER_ID_ARG1  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(15):  if(CMAKE_C_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(17):  else()
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(18):  set(CMAKE_C_COMPILER_ID_FLAGS  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(20):  string(REPLACE   ; CMAKE_C_COMPILER_ID_FLAGS_LIST  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(23):  set(CMAKE_C_COMPILER_ID_DIR /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(27):  foreach(userflags   )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(28):  foreach(testflags   -c;-Aa;-D__CLASSIC_C__;--target=arm-arm-none-eabi -mcpu=cortex-m3 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(31):  separate_arguments(testflags UNIX_COMMAND  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(32):  CMAKE_DETERMINE_COMPILER_ID_BUILD(C   CMakeCCompilerId.c )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(227):  file(REMOVE_RECURSE /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(228):  file(MAKE_DIRECTORY /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(229):  file(MAKE_DIRECTORY /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/tmp )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(230):  CMAKE_DETERMINE_COMPILER_ID_WRITE(C CMakeCCompilerId.c )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(208):  find_file(src_in CMakeCCompilerId.c.in PATHS /usr/share/cmake-3.16/Modules  NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(209):  file(READ /usr/share/cmake-3.16/Modules/CMakeCCompilerId.c.in ID_CONTENT_IN )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(211):  compiler_id_detection(CMAKE_C_COMPILER_ID_CONTENT C ID_STRING VERSION_STRINGS PLATFORM_DEFAULT_COMPILER )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(16):  if(NOT lang STREQUAL Fortran AND NOT lang STREQUAL CSharp )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(17):  file(GLOB lang_files /usr/share/cmake-3.16/Modules/Compiler/*-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(19):  set(nonlang CXX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(20):  if(lang STREQUAL CXX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(24):  file(GLOB nonlang_files /usr/share/cmake-3.16/Modules/Compiler/*-CXX-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(26):  list(REMOVE_ITEM lang_files /usr/share/cmake-3.16/Modules/Compiler/Comeau-CXX-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Compaq-CXX-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/GNU-CXX-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/HP-CXX-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/SunPro-CXX-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/VisualAge-CXX-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/XL-CXX-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/XLClang-CXX-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/zOS-CXX-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(29):  set(files /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Bruce-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Fujitsu-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/SCO-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/SDCC-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/TinyCC-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(30):  if(files )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(31):  foreach(file /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Bruce-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Fujitsu-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/SCO-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/SDCC-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/TinyCC-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake;/usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__) )
/usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
#if defined(__VISUALDSPVERSION__)
  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
#endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/ADSP-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId ADSP-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_ADSP 
#if defined(__VISUALDSPVERSION__)
  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
#endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_ADSP  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_ADSP defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__ARMCC_VERSION) && !defined(__clang__) )
/usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
  # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
  # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
  # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
  # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
#endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/ARMCC-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId ARMCC-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_ARMCC 
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
  # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
  # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
  # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
  # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
#endif
 PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_ARMCC  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_ARMCC defined(__ARMCC_VERSION) && !defined(__clang__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__clang__) && defined(__ARMCOMPILER_VERSION) )
/usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
  # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
  # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
  # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000) )
/usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake(9):  string(APPEND _compiler_id_version_compute 
# define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/ARMClang-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId ARMClang-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_ARMClang 
  # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
  # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
  # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)
# define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_ARMClang  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_ARMClang defined(__clang__) && defined(__ARMCOMPILER_VERSION) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__clang__) && defined(__apple_build_version__) )
/usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake(4):  include(/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake(2):  set(_compiler_id_version_compute 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif )
/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake(12):  set(_compiler_id_simulate 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif )
/usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake(6):  string(APPEND _compiler_id_version_compute 
# define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/AppleClang-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId AppleClang-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_AppleClang 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif
# define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_AppleClang 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_AppleClang defined(__clang__) && defined(__apple_build_version__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__BORLANDC__) )
/usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
  /* __BORLANDC__ = 0xVRR */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/Borland-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId Borland-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_Borland 
  /* __BORLANDC__ = 0xVRR */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_Borland  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_Borland defined(__BORLANDC__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/Bruce-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/Bruce-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Bruce-C-DetermineCompiler.cmake(1):  set(_compiler_id_pp_test defined(__BCC__) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/Bruce-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId Bruce-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_Bruce  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_Bruce  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_Bruce defined(__BCC__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__clang__) )
/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake(4):  include(/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake(2):  set(_compiler_id_version_compute 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif )
/usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompilerInternal.cmake(12):  set(_compiler_id_simulate 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/Clang-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId Clang-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_Clang 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_Clang 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_Clang defined(__clang__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__DECC) )
/usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
  /* __DECC_VER = VVRRTPPPP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/Compaq-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId Compaq-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_Compaq 
  /* __DECC_VER = VVRRTPPPP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_Compaq  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_Compaq defined(__DECC) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(_CRAYC) )
/usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/Cray-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId Cray-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_Cray 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_Cray  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_Cray defined(_CRAYC) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__) )
/usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/Embarcadero-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId Embarcadero-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_Embarcadero 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_Embarcadero  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_Embarcadero defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/Fujitsu-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/Fujitsu-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Fujitsu-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__FUJITSU) || defined(__FCC_VERSION) || defined(__fcc_version) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/Fujitsu-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId Fujitsu-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_Fujitsu  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_Fujitsu  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_Fujitsu defined(__FUJITSU) || defined(__FCC_VERSION) || defined(__fcc_version) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake(1):  set(_compiler_id_pp_test defined(__ghs__) )
/usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake(3):  set(_compiler_id_version_compute 
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/GHS-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId GHS-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_GHS 
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_GHS  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_GHS defined(__ghs__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__GNUC__) )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
# if defined(__GNUC_MINOR__)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/GNU-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId GNU-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_GNU 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
# if defined(__GNUC_MINOR__)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_GNU  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_GNU defined(__GNUC__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__HP_cc) )
/usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
  /* __HP_cc = VVRRPP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/HP-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId HP-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_HP 
  /* __HP_cc = VVRRPP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_HP  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_HP defined(__HP_cc) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake(26):  set(_compiler_id_pp_test defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC) )
/usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake(28):  set(_compiler_id_version_compute 
# if defined(__VER__) && defined(__ICCARM__)
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
#  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
#  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/IAR-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId IAR-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_IAR 
# if defined(__VER__) && defined(__ICCARM__)
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
#  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
#  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_IAR  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_IAR defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__INTEL_COMPILER) || defined(__ICC) )
/usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
  /* __INTEL_COMPILER = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
# if defined(__INTEL_COMPILER_UPDATE)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
# else
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
# elif defined(__GNUG__)
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
# endif )
/usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake(34):  set(_compiler_id_simulate 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define @PREFIX@SIMULATE_ID "GNU"
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/Intel-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId Intel-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_Intel 
  /* __INTEL_COMPILER = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
# if defined(__INTEL_COMPILER_UPDATE)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
# else
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
# elif defined(__GNUG__)
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_Intel 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define @PREFIX@SIMULATE_ID "GNU"
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_Intel defined(__INTEL_COMPILER) || defined(__ICC) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(_MSC_VER) )
/usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
  /* _MSC_VER = VVRR */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/MSVC-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId MSVC-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_MSVC 
  /* _MSC_VER = VVRR */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_MSVC  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_MSVC defined(_MSC_VER) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__NVCC__) )
/usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
# if defined(__CUDACC_VER_MAJOR__)
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif )
/usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake(16):  set(_compiler_id_simulate 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/NVIDIA-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId NVIDIA-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_NVIDIA 
# if defined(__CUDACC_VER_MAJOR__)
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__CUDACC_VER_MAJOR__)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__CUDACC_VER_MINOR__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CUDACC_VER_BUILD__)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_NVIDIA 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_NVIDIA defined(__NVCC__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__WATCOMC__) )
/usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
   /* __WATCOMC__ = VVRP + 1100 */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/OpenWatcom-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId OpenWatcom-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_OpenWatcom 
   /* __WATCOMC__ = VVRP + 1100 */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_OpenWatcom  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_OpenWatcom defined(__WATCOMC__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__PGI) )
/usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/PGI-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId PGI-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_PGI 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_PGI  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_PGI defined(__PGI) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__PATHCC__) )
/usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/PathScale-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId PathScale-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_PathScale 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_PathScale  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_PathScale defined(__PATHCC__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/SCO-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/SCO-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/SCO-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__SCO_VERSION__) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/SCO-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId SCO-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_SCO  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_SCO  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_SCO defined(__SCO_VERSION__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/SDCC-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/SDCC-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/SDCC-C-DetermineCompiler.cmake(4):  set(_compiler_id_pp_test defined(__SDCC_VERSION_MAJOR) || defined(SDCC) )
/usr/share/cmake-3.16/Modules/Compiler/SDCC-C-DetermineCompiler.cmake(6):  set(_compiler_id_version_compute 
# if defined(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MAJOR @MACRO_DEC@(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MINOR @MACRO_DEC@(__SDCC_VERSION_MINOR)
#  define COMPILER_VERSION_PATCH @MACRO_DEC@(__SDCC_VERSION_PATCH)
# else
  /* SDCC = VRP */
#  define COMPILER_VERSION_MAJOR @MACRO_DEC@(SDCC/100)
#  define COMPILER_VERSION_MINOR @MACRO_DEC@(SDCC/10 % 10)
#  define COMPILER_VERSION_PATCH @MACRO_DEC@(SDCC    % 10)
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/SDCC-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId SDCC-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_SDCC 
# if defined(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MAJOR @MACRO_DEC@(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MINOR @MACRO_DEC@(__SDCC_VERSION_MINOR)
#  define COMPILER_VERSION_PATCH @MACRO_DEC@(__SDCC_VERSION_PATCH)
# else
  /* SDCC = VRP */
#  define COMPILER_VERSION_MAJOR @MACRO_DEC@(SDCC/100)
#  define COMPILER_VERSION_MINOR @MACRO_DEC@(SDCC/10 % 10)
#  define COMPILER_VERSION_PATCH @MACRO_DEC@(SDCC    % 10)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_SDCC  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_SDCC defined(__SDCC_VERSION_MAJOR) || defined(SDCC) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__SUNPRO_C) )
/usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
# if __SUNPRO_C >= 0x5100
   /* __SUNPRO_C = 0xVRRP */
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/SunPro-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId SunPro-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_SunPro 
# if __SUNPRO_C >= 0x5100
   /* __SUNPRO_C = 0xVRRP */
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_SunPro  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_SunPro defined(__SUNPRO_C) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__TI_COMPILER_VERSION__) )
/usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/TI-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId TI-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_TI 
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_TI  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_TI defined(__TI_COMPILER_VERSION__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/TinyCC-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/TinyCC-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/TinyCC-C-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__TINYC__) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/TinyCC-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId TinyCC-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_TinyCC  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_TinyCC  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_TinyCC defined(__TINYC__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800 )
/usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake(4):  include(/usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake )
/usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake(2):  set(_compiler_id_version_compute 
  /* __IBMC__ = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/VisualAge-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId VisualAge-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_VisualAge 
  /* __IBMC__ = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_VisualAge  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_VisualAge defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800 PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__WATCOMC__) && __WATCOMC__ < 1200 )
/usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake(4):  set(_compiler_id_version_compute 
   /* __WATCOMC__ = VVRR */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/Watcom-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId Watcom-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_Watcom 
   /* __WATCOMC__ = VVRR */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
# endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_Watcom  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_Watcom defined(__WATCOMC__) && __WATCOMC__ < 1200 PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800 )
/usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake(4):  include(/usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake )
/usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake(2):  set(_compiler_id_version_compute 
  /* __IBMC__ = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/XL-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId XL-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_XL 
  /* __IBMC__ = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_XL  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_XL defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800 PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake(1):  set(_compiler_id_pp_test defined(__ibmxl__) && defined(__clang__) )
/usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake(3):  set(_compiler_id_version_compute 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
# define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/XLClang-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId XLClang-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_XLClang 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
# define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
 PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_XLClang  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_XLClang defined(__ibmxl__) && defined(__clang__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(32):  _readFile(/usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(6):  include(/usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake )
/usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake(2):  set(_compiler_id_pp_test defined(__IBMC__) && defined(__COMPILER_VER__) )
/usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake(4):  include(/usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake )
/usr/share/cmake-3.16/Modules/Compiler/IBMCPP-C-DetermineVersionInternal.cmake(2):  set(_compiler_id_version_compute 
  /* __IBMC__ = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10) )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(7):  get_filename_component(name /usr/share/cmake-3.16/Modules/Compiler/zOS-C-DetermineCompiler.cmake NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(8):  string(REGEX REPLACE -.*  CompilerId zOS-C-DetermineCompiler )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(9):  set(_compiler_id_version_compute_zOS 
  /* __IBMC__ = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(10):  set(_compiler_id_simulate_zOS  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(11):  set(_compiler_id_pp_test_zOS defined(__IBMC__) && defined(__COMPILER_VER__) PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(35):  set(options ID_STRING VERSION_STRINGS ID_DEFINE PLATFORM_DEFAULT_COMPILER )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(36):  set(oneValueArgs PREFIX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(37):  cmake_parse_arguments(CID ID_STRING;VERSION_STRINGS;ID_DEFINE;PLATFORM_DEFAULT_COMPILER PREFIX  ID_STRING;VERSION_STRINGS;PLATFORM_DEFAULT_COMPILER )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(38):  if(CID_UNPARSED_ARGUMENTS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(44):  if(lang STREQUAL CXX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(49):  list(APPEND ordered_compilers Intel PathScale Embarcadero Borland Watcom OpenWatcom SunPro HP Compaq zOS XLClang XL VisualAge PGI Cray TI Fujitsu GHS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(69):  if(lang STREQUAL C )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(70):  list(APPEND ordered_compilers TinyCC Bruce )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(75):  list(APPEND ordered_compilers SCO ARMCC AppleClang ARMClang Clang GNU MSVC ADSP IAR )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(86):  if(lang STREQUAL C )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(87):  list(APPEND ordered_compilers SDCC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(93):  if(lang STREQUAL CUDA )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(97):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(105):  set(pp_if #if )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(106):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(107):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(111):  foreach(Id Intel;PathScale;Embarcadero;Borland;Watcom;OpenWatcom;SunPro;HP;Compaq;zOS;XLClang;XL;VisualAge;PGI;Cray;TI;Fujitsu;GHS;TinyCC;Bruce;SCO;ARMCC;AppleClang;ARMClang;Clang;GNU;MSVC;ADSP;IAR;SDCC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_Intel )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #if defined(__INTEL_COMPILER) || defined(__ICC)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define @PREFIX@SIMULATE_ID "GNU"
# endif SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
  /* __INTEL_COMPILER = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__INTEL_COMPILER/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__INTEL_COMPILER/10 % 10)
# if defined(__INTEL_COMPILER_UPDATE)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER_UPDATE)
# else
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__INTEL_COMPILER   % 10)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
# elif defined(__GNUG__)
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define @PREFIX@SIMULATE_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
  /* __INTEL_COMPILER = VRP */
# define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
# if defined(__INTEL_COMPILER_UPDATE)
#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
# else
#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP */
# define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
# if defined(__INTEL_COMPILER_UPDATE)
#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
# else
#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_PathScale )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__PATHCC__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "PathScale" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PATHCC__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PATHCC_PATCHLEVEL__)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_Embarcadero )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "Embarcadero" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__CODEGEARC_VERSION__     & 0xFFFF) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_Borland )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__BORLANDC__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "Borland" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
  /* __BORLANDC__ = 0xVRR */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__BORLANDC__>>8)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__BORLANDC__ & 0xFF) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_Watcom )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__WATCOMC__) && __WATCOMC__ < 1200
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "Watcom" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
   /* __WATCOMC__ = VVRR */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__WATCOMC__ / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_OpenWatcom )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__WATCOMC__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "OpenWatcom" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
   /* __WATCOMC__ = VVRP + 1100 */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__WATCOMC__ - 1100) / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__WATCOMC__ % 10)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_SunPro )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__SUNPRO_C)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "SunPro" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# if __SUNPRO_C >= 0x5100
   /* __SUNPRO_C = 0xVRRP */
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>12)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xFF)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__SUNPRO_C>>8)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__SUNPRO_C>>4 & 0xF)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__SUNPRO_C    & 0xF)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# if __SUNPRO_C >= 0x5100
   /* __SUNPRO_C = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__SUNPRO_C)
# define COMPILER_ID "SunPro"
# if __SUNPRO_C >= 0x5100
   /* __SUNPRO_C = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_HP )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__HP_cc)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "HP" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
  /* __HP_cc = VVRRPP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__HP_cc/10000)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__HP_cc/100 % 100)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__HP_cc     % 100) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
  /* __HP_cc = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__HP_cc)
# define COMPILER_ID "HP"
  /* __HP_cc = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_Compaq )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__DECC)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "Compaq" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
  /* __DECC_VER = VVRRTPPPP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__DECC_VER/10000000)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__DECC_VER/100000  % 100)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__DECC_VER         % 10000) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
  /* __DECC_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__DECC)
# define COMPILER_ID "Compaq"
  /* __DECC_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_zOS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__IBMC__) && defined(__COMPILER_VER__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "zOS" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
  /* __IBMC__ = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__IBMC__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_XLClang )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__ibmxl__) && defined(__clang__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "XLClang" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ibmxl_version__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ibmxl_release__)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ibmxl_modification__)
# define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__ibmxl_ptf_fix_level__)
 VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)

 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)

 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_XL )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "XL" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
  /* __IBMC__ = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800
# define COMPILER_ID "XL"
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_VisualAge )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "VisualAge" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
  /* __IBMC__ = VRP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__IBMC__/100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__IBMC__/10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__IBMC__    % 10) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_PGI )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__PGI)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "PGI" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__PGIC__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__PGIC_PATCHLEVEL__)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_Cray )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(_CRAYC)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "Cray" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_RELEASE_MAJOR)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_RELEASE_MINOR) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_TI )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__TI_COMPILER_VERSION__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "TI" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000000)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__TI_COMPILER_VERSION__/1000   % 1000)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__TI_COMPILER_VERSION__        % 1000) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_Fujitsu )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__FUJITSU) || defined(__FCC_VERSION) || defined(__fcc_version)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "Fujitsu" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE  VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__FUJITSU) || defined(__FCC_VERSION) || defined(__fcc_version)
# define COMPILER_ID "Fujitsu"
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_GHS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__ghs__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "GHS" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GHS_VERSION_NUMBER / 10 % 10)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GHS_VERSION_NUMBER      % 10)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_TinyCC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__TINYC__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "TinyCC" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE  VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__TINYC__)
# define COMPILER_ID "TinyCC"
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_Bruce )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__BCC__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "Bruce" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE  VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__BCC__)
# define COMPILER_ID "Bruce"
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_SCO )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__SCO_VERSION__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "SCO" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE  VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_ARMCC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__ARMCC_VERSION) && !defined(__clang__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "ARMCC" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/1000000)
  # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 100)
  # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCC_VERSION/100000)
  # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCC_VERSION/10000 % 10)
  # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCC_VERSION    % 10000)
#endif
 VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif

 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif

 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_AppleClang )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__clang__) && defined(__apple_build_version__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif
# define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(__apple_build_version__) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_ARMClang )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "ARMClang" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
  # define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__ARMCOMPILER_VERSION/1000000)
  # define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__ARMCOMPILER_VERSION/10000 % 100)
  # define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__ARMCOMPILER_VERSION     % 10000)
# define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__ARMCOMPILER_VERSION) VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_Clang )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__clang__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE 
# if defined(_MSC_VER)
#  define @PREFIX@SIMULATE_ID "MSVC"
# endif SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__clang_major__)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__clang_minor__)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define @PREFIX@SIMULATE_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
#  define @PREFIX@SIMULATE_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_GNU )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__GNUC__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "GNU" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(__GNUC__)
# if defined(__GNUC_MINOR__)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__GNUC_PATCHLEVEL__)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__GNUC__)
# define COMPILER_ID "GNU"
# define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_MSVC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(_MSC_VER)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "MSVC" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
  /* _MSC_VER = VVRR */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@(_MSC_VER / 100)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define @PREFIX@COMPILER_VERSION_TWEAK @MACRO_DEC@(_MSC_BUILD)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_ADSP )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "ADSP" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
#if defined(__VISUALDSPVERSION__)
  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
# define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_HEX@(__VISUALDSPVERSION__>>24)
# define @PREFIX@COMPILER_VERSION_MINOR @MACRO_HEX@(__VISUALDSPVERSION__>>16 & 0xFF)
# define @PREFIX@COMPILER_VERSION_PATCH @MACRO_HEX@(__VISUALDSPVERSION__>>8  & 0xFF)
#endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
#if defined(__VISUALDSPVERSION__)
  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)
# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)
# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)
#endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)
# define COMPILER_ID "ADSP"
#if defined(__VISUALDSPVERSION__)
  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)
# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)
# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)
#endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_IAR )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "IAR" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# if defined(__VER__) && defined(__ICCARM__)
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 1000000)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@(((__VER__) / 1000) % 1000)
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@((__VER__) % 1000)
#  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
#  define @PREFIX@COMPILER_VERSION_MAJOR @MACRO_DEC@((__VER__) / 100)
#  define @PREFIX@COMPILER_VERSION_MINOR @MACRO_DEC@((__VER__) - (((__VER__) / 100)*100))
#  define @PREFIX@COMPILER_VERSION_PATCH @MACRO_DEC@(__SUBVERSION__)
#  define @PREFIX@COMPILER_VERSION_INTERNAL @MACRO_DEC@(__IAR_SYSTEMS_ICC__)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(112):  if(NOT _compiler_id_pp_test_SDCC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(115):  set(id_content #elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(116):  if(CID_ID_STRING )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(117):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(118):  string(CONFIGURE  SIMULATE_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(119):  string(APPEND id_content # define COMPILER_ID "SDCC" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(121):  if(CID_ID_DEFINE )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(125):  if(CID_VERSION_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(126):  set(PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(127):  set(MACRO_DEC DEC )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(128):  set(MACRO_HEX HEX )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(129):  string(CONFIGURE 
# if defined(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MAJOR @MACRO_DEC@(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MINOR @MACRO_DEC@(__SDCC_VERSION_MINOR)
#  define COMPILER_VERSION_PATCH @MACRO_DEC@(__SDCC_VERSION_PATCH)
# else
  /* SDCC = VRP */
#  define COMPILER_VERSION_MAJOR @MACRO_DEC@(SDCC/100)
#  define COMPILER_VERSION_MINOR @MACRO_DEC@(SDCC/10 % 10)
#  define COMPILER_VERSION_PATCH @MACRO_DEC@(SDCC    % 10)
# endif VERSION_BLOCK @ONLY )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(130):  string(APPEND id_content 
# if defined(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)
#  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)
# else
  /* SDCC = VRP */
#  define COMPILER_VERSION_MAJOR DEC(SDCC/100)
#  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)
#  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(132):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 
#elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)
# define COMPILER_ID "SDCC"
# if defined(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)
#  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)
# else
  /* SDCC = VRP */
#  define COMPILER_VERSION_MAJOR DEC(SDCC/100)
#  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)
#  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)
# endif
 )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(133):  set(pp_if #elif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(136):  if(CID_PLATFORM_DEFAULT_COMPILER )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(137):  set(platform_compiler_detection 
/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID "" )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(148):  string(APPEND CMAKE_C_COMPILER_ID_CONTENT 

/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif )
/usr/share/cmake-3.16/Modules/CMakeCompilerIdDetection.cmake(151):  set(CMAKE_C_COMPILER_ID_CONTENT 
/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP */
# define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
# if defined(__INTEL_COMPILER_UPDATE)
#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
# else
#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_C)
# define COMPILER_ID "SunPro"
# if __SUNPRO_C >= 0x5100
   /* __SUNPRO_C = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
# endif

#elif defined(__HP_cc)
# define COMPILER_ID "HP"
  /* __HP_cc = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)

#elif defined(__DECC)
# define COMPILER_ID "Compaq"
  /* __DECC_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)

#elif defined(__IBMC__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)

#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800
# define COMPILER_ID "XL"
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)

#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__FUJITSU) || defined(__FCC_VERSION) || defined(__fcc_version)
# define COMPILER_ID "Fujitsu"

#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TINYC__)
# define COMPILER_ID "TinyCC"

#elif defined(__BCC__)
# define COMPILER_ID "Bruce"

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__GNUC__)
# define COMPILER_ID "GNU"
# define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)
# define COMPILER_ID "ADSP"
#if defined(__VISUALDSPVERSION__)
  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)
# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)
# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif

#elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)
# define COMPILER_ID "SDCC"
# if defined(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)
#  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)
# else
  /* SDCC = VRP */
#  define COMPILER_VERSION_MAJOR DEC(SDCC/100)
#  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)
#  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)
# endif


/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(217):  unset(src_in CACHE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(218):  string(CONFIGURE #ifdef __cplusplus
# error "A C++ compiler has been selected for C."
#endif

#if defined(__18CXX)
# define ID_VOID_MAIN
#endif
#if defined(__CLASSIC_C__)
/* cv-qualifiers did not exist in K&R C */
# define const
# define volatile
#endif

@CMAKE_C_COMPILER_ID_CONTENT@

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXE) || defined(__CRAYXC)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

@CMAKE_C_COMPILER_ID_PLATFORM_CONTENT@
@CMAKE_C_COMPILER_ID_ERROR_FOR_TEST@

#if !defined(__STDC__)
# if (defined(_MSC_VER) && !defined(__clang__)) \
  || (defined(__ibmxl__) || defined(__IBMC__))
#  define C_DIALECT "90"
# else
#  define C_DIALECT
# endif
#elif __STDC_VERSION__ >= 201000L
# define C_DIALECT "11"
#elif __STDC_VERSION__ >= 199901L
# define C_DIALECT "99"
#else
# define C_DIALECT "90"
#endif
const char* info_language_dialect_default =
  "INFO" ":" "dialect_default[" C_DIALECT "]";

/*--------------------------------------------------------------------------*/

#ifdef ID_VOID_MAIN
void main() {}
#else
# if defined(__CLASSIC_C__)
int main(argc, argv) int argc; char *argv[];
# else
int main(int argc, char* argv[])
# endif
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#ifdef COMPILER_VERSION_INTERNAL
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXE) || defined(__CRAYXC)
  require += info_cray[argc];
#endif
  require += info_language_dialect_default[argc];
  (void)argv;
  return require;
}
#endif
 ID_CONTENT_OUT @ONLY )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(219):  file(WRITE /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/CMakeCCompilerId.c #ifdef __cplusplus
# error "A C++ compiler has been selected for C."
#endif

#if defined(__18CXX)
# define ID_VOID_MAIN
#endif
#if defined(__CLASSIC_C__)
/* cv-qualifiers did not exist in K&R C */
# define const
# define volatile
#endif


/* Version number components: V=Version, R=Revision, P=Patch
   Version date components:   YYYY=Year, MM=Month,   DD=Day  */

#if defined(__INTEL_COMPILER) || defined(__ICC)
# define COMPILER_ID "Intel"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# if defined(__GNUC__)
#  define SIMULATE_ID "GNU"
# endif
  /* __INTEL_COMPILER = VRP */
# define COMPILER_VERSION_MAJOR DEC(__INTEL_COMPILER/100)
# define COMPILER_VERSION_MINOR DEC(__INTEL_COMPILER/10 % 10)
# if defined(__INTEL_COMPILER_UPDATE)
#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER_UPDATE)
# else
#  define COMPILER_VERSION_PATCH DEC(__INTEL_COMPILER   % 10)
# endif
# if defined(__INTEL_COMPILER_BUILD_DATE)
  /* __INTEL_COMPILER_BUILD_DATE = YYYYMMDD */
#  define COMPILER_VERSION_TWEAK DEC(__INTEL_COMPILER_BUILD_DATE)
# endif
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# if defined(__GNUC__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUC__)
# elif defined(__GNUG__)
#  define SIMULATE_VERSION_MAJOR DEC(__GNUG__)
# endif
# if defined(__GNUC_MINOR__)
#  define SIMULATE_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define SIMULATE_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(__PATHCC__)
# define COMPILER_ID "PathScale"
# define COMPILER_VERSION_MAJOR DEC(__PATHCC__)
# define COMPILER_VERSION_MINOR DEC(__PATHCC_MINOR__)
# if defined(__PATHCC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PATHCC_PATCHLEVEL__)
# endif

#elif defined(__BORLANDC__) && defined(__CODEGEARC_VERSION__)
# define COMPILER_ID "Embarcadero"
# define COMPILER_VERSION_MAJOR HEX(__CODEGEARC_VERSION__>>24 & 0x00FF)
# define COMPILER_VERSION_MINOR HEX(__CODEGEARC_VERSION__>>16 & 0x00FF)
# define COMPILER_VERSION_PATCH DEC(__CODEGEARC_VERSION__     & 0xFFFF)

#elif defined(__BORLANDC__)
# define COMPILER_ID "Borland"
  /* __BORLANDC__ = 0xVRR */
# define COMPILER_VERSION_MAJOR HEX(__BORLANDC__>>8)
# define COMPILER_VERSION_MINOR HEX(__BORLANDC__ & 0xFF)

#elif defined(__WATCOMC__) && __WATCOMC__ < 1200
# define COMPILER_ID "Watcom"
   /* __WATCOMC__ = VVRR */
# define COMPILER_VERSION_MAJOR DEC(__WATCOMC__ / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__WATCOMC__)
# define COMPILER_ID "OpenWatcom"
   /* __WATCOMC__ = VVRP + 1100 */
# define COMPILER_VERSION_MAJOR DEC((__WATCOMC__ - 1100) / 100)
# define COMPILER_VERSION_MINOR DEC((__WATCOMC__ / 10) % 10)
# if (__WATCOMC__ % 10) > 0
#  define COMPILER_VERSION_PATCH DEC(__WATCOMC__ % 10)
# endif

#elif defined(__SUNPRO_C)
# define COMPILER_ID "SunPro"
# if __SUNPRO_C >= 0x5100
   /* __SUNPRO_C = 0xVRRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>12)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xFF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
# else
   /* __SUNPRO_CC = 0xVRP */
#  define COMPILER_VERSION_MAJOR HEX(__SUNPRO_C>>8)
#  define COMPILER_VERSION_MINOR HEX(__SUNPRO_C>>4 & 0xF)
#  define COMPILER_VERSION_PATCH HEX(__SUNPRO_C    & 0xF)
# endif

#elif defined(__HP_cc)
# define COMPILER_ID "HP"
  /* __HP_cc = VVRRPP */
# define COMPILER_VERSION_MAJOR DEC(__HP_cc/10000)
# define COMPILER_VERSION_MINOR DEC(__HP_cc/100 % 100)
# define COMPILER_VERSION_PATCH DEC(__HP_cc     % 100)

#elif defined(__DECC)
# define COMPILER_ID "Compaq"
  /* __DECC_VER = VVRRTPPPP */
# define COMPILER_VERSION_MAJOR DEC(__DECC_VER/10000000)
# define COMPILER_VERSION_MINOR DEC(__DECC_VER/100000  % 100)
# define COMPILER_VERSION_PATCH DEC(__DECC_VER         % 10000)

#elif defined(__IBMC__) && defined(__COMPILER_VER__)
# define COMPILER_ID "zOS"
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)

#elif defined(__ibmxl__) && defined(__clang__)
# define COMPILER_ID "XLClang"
# define COMPILER_VERSION_MAJOR DEC(__ibmxl_version__)
# define COMPILER_VERSION_MINOR DEC(__ibmxl_release__)
# define COMPILER_VERSION_PATCH DEC(__ibmxl_modification__)
# define COMPILER_VERSION_TWEAK DEC(__ibmxl_ptf_fix_level__)


#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ >= 800
# define COMPILER_ID "XL"
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)

#elif defined(__IBMC__) && !defined(__COMPILER_VER__) && __IBMC__ < 800
# define COMPILER_ID "VisualAge"
  /* __IBMC__ = VRP */
# define COMPILER_VERSION_MAJOR DEC(__IBMC__/100)
# define COMPILER_VERSION_MINOR DEC(__IBMC__/10 % 10)
# define COMPILER_VERSION_PATCH DEC(__IBMC__    % 10)

#elif defined(__PGI)
# define COMPILER_ID "PGI"
# define COMPILER_VERSION_MAJOR DEC(__PGIC__)
# define COMPILER_VERSION_MINOR DEC(__PGIC_MINOR__)
# if defined(__PGIC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__PGIC_PATCHLEVEL__)
# endif

#elif defined(_CRAYC)
# define COMPILER_ID "Cray"
# define COMPILER_VERSION_MAJOR DEC(_RELEASE_MAJOR)
# define COMPILER_VERSION_MINOR DEC(_RELEASE_MINOR)

#elif defined(__TI_COMPILER_VERSION__)
# define COMPILER_ID "TI"
  /* __TI_COMPILER_VERSION__ = VVVRRRPPP */
# define COMPILER_VERSION_MAJOR DEC(__TI_COMPILER_VERSION__/1000000)
# define COMPILER_VERSION_MINOR DEC(__TI_COMPILER_VERSION__/1000   % 1000)
# define COMPILER_VERSION_PATCH DEC(__TI_COMPILER_VERSION__        % 1000)

#elif defined(__FUJITSU) || defined(__FCC_VERSION) || defined(__fcc_version)
# define COMPILER_ID "Fujitsu"

#elif defined(__ghs__)
# define COMPILER_ID "GHS"
/* __GHS_VERSION_NUMBER = VVVVRP */
# ifdef __GHS_VERSION_NUMBER
# define COMPILER_VERSION_MAJOR DEC(__GHS_VERSION_NUMBER / 100)
# define COMPILER_VERSION_MINOR DEC(__GHS_VERSION_NUMBER / 10 % 10)
# define COMPILER_VERSION_PATCH DEC(__GHS_VERSION_NUMBER      % 10)
# endif

#elif defined(__TINYC__)
# define COMPILER_ID "TinyCC"

#elif defined(__BCC__)
# define COMPILER_ID "Bruce"

#elif defined(__SCO_VERSION__)
# define COMPILER_ID "SCO"

#elif defined(__ARMCC_VERSION) && !defined(__clang__)
# define COMPILER_ID "ARMCC"
#if __ARMCC_VERSION >= 1000000
  /* __ARMCC_VERSION = VRRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION     % 10000)
#else
  /* __ARMCC_VERSION = VRPPPP */
  # define COMPILER_VERSION_MAJOR DEC(__ARMCC_VERSION/100000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCC_VERSION/10000 % 10)
  # define COMPILER_VERSION_PATCH DEC(__ARMCC_VERSION    % 10000)
#endif


#elif defined(__clang__) && defined(__apple_build_version__)
# define COMPILER_ID "AppleClang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif
# define COMPILER_VERSION_TWEAK DEC(__apple_build_version__)

#elif defined(__clang__) && defined(__ARMCOMPILER_VERSION)
# define COMPILER_ID "ARMClang"
  # define COMPILER_VERSION_MAJOR DEC(__ARMCOMPILER_VERSION/1000000)
  # define COMPILER_VERSION_MINOR DEC(__ARMCOMPILER_VERSION/10000 % 100)
  # define COMPILER_VERSION_PATCH DEC(__ARMCOMPILER_VERSION     % 10000)
# define COMPILER_VERSION_INTERNAL DEC(__ARMCOMPILER_VERSION)

#elif defined(__clang__)
# define COMPILER_ID "Clang"
# if defined(_MSC_VER)
#  define SIMULATE_ID "MSVC"
# endif
# define COMPILER_VERSION_MAJOR DEC(__clang_major__)
# define COMPILER_VERSION_MINOR DEC(__clang_minor__)
# define COMPILER_VERSION_PATCH DEC(__clang_patchlevel__)
# if defined(_MSC_VER)
   /* _MSC_VER = VVRR */
#  define SIMULATE_VERSION_MAJOR DEC(_MSC_VER / 100)
#  define SIMULATE_VERSION_MINOR DEC(_MSC_VER % 100)
# endif

#elif defined(__GNUC__)
# define COMPILER_ID "GNU"
# define COMPILER_VERSION_MAJOR DEC(__GNUC__)
# if defined(__GNUC_MINOR__)
#  define COMPILER_VERSION_MINOR DEC(__GNUC_MINOR__)
# endif
# if defined(__GNUC_PATCHLEVEL__)
#  define COMPILER_VERSION_PATCH DEC(__GNUC_PATCHLEVEL__)
# endif

#elif defined(_MSC_VER)
# define COMPILER_ID "MSVC"
  /* _MSC_VER = VVRR */
# define COMPILER_VERSION_MAJOR DEC(_MSC_VER / 100)
# define COMPILER_VERSION_MINOR DEC(_MSC_VER % 100)
# if defined(_MSC_FULL_VER)
#  if _MSC_VER >= 1400
    /* _MSC_FULL_VER = VVRRPPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 100000)
#  else
    /* _MSC_FULL_VER = VVRRPPPP */
#   define COMPILER_VERSION_PATCH DEC(_MSC_FULL_VER % 10000)
#  endif
# endif
# if defined(_MSC_BUILD)
#  define COMPILER_VERSION_TWEAK DEC(_MSC_BUILD)
# endif

#elif defined(__VISUALDSPVERSION__) || defined(__ADSPBLACKFIN__) || defined(__ADSPTS__) || defined(__ADSP21000__)
# define COMPILER_ID "ADSP"
#if defined(__VISUALDSPVERSION__)
  /* __VISUALDSPVERSION__ = 0xVVRRPP00 */
# define COMPILER_VERSION_MAJOR HEX(__VISUALDSPVERSION__>>24)
# define COMPILER_VERSION_MINOR HEX(__VISUALDSPVERSION__>>16 & 0xFF)
# define COMPILER_VERSION_PATCH HEX(__VISUALDSPVERSION__>>8  & 0xFF)
#endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# define COMPILER_ID "IAR"
# if defined(__VER__) && defined(__ICCARM__)
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 1000000)
#  define COMPILER_VERSION_MINOR DEC(((__VER__) / 1000) % 1000)
#  define COMPILER_VERSION_PATCH DEC((__VER__) % 1000)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# elif defined(__VER__) && (defined(__ICCAVR__) || defined(__ICCRX__) || defined(__ICCRH850__) || defined(__ICCRL78__) || defined(__ICC430__) || defined(__ICCRISCV__) || defined(__ICCV850__) || defined(__ICC8051__))
#  define COMPILER_VERSION_MAJOR DEC((__VER__) / 100)
#  define COMPILER_VERSION_MINOR DEC((__VER__) - (((__VER__) / 100)*100))
#  define COMPILER_VERSION_PATCH DEC(__SUBVERSION__)
#  define COMPILER_VERSION_INTERNAL DEC(__IAR_SYSTEMS_ICC__)
# endif

#elif defined(__SDCC_VERSION_MAJOR) || defined(SDCC)
# define COMPILER_ID "SDCC"
# if defined(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MAJOR DEC(__SDCC_VERSION_MAJOR)
#  define COMPILER_VERSION_MINOR DEC(__SDCC_VERSION_MINOR)
#  define COMPILER_VERSION_PATCH DEC(__SDCC_VERSION_PATCH)
# else
  /* SDCC = VRP */
#  define COMPILER_VERSION_MAJOR DEC(SDCC/100)
#  define COMPILER_VERSION_MINOR DEC(SDCC/10 % 10)
#  define COMPILER_VERSION_PATCH DEC(SDCC    % 10)
# endif


/* These compilers are either not known or too old to define an
  identification macro.  Try to identify the platform and guess that
  it is the native compiler.  */
#elif defined(__hpux) || defined(__hpua)
# define COMPILER_ID "HP"

#else /* unknown compiler */
# define COMPILER_ID ""
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";
#ifdef SIMULATE_ID
char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";
#endif

#ifdef __QNXNTO__
char const* qnxnto = "INFO" ":" "qnxnto[]";
#endif

#if defined(__CRAYXE) || defined(__CRAYXC)
char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";
#endif

#define STRINGIFY_HELPER(X) #X
#define STRINGIFY(X) STRINGIFY_HELPER(X)

/* Identify known platforms by name.  */
#if defined(__linux) || defined(__linux__) || defined(linux)
# define PLATFORM_ID "Linux"

#elif defined(__CYGWIN__)
# define PLATFORM_ID "Cygwin"

#elif defined(__MINGW32__)
# define PLATFORM_ID "MinGW"

#elif defined(__APPLE__)
# define PLATFORM_ID "Darwin"

#elif defined(_WIN32) || defined(__WIN32__) || defined(WIN32)
# define PLATFORM_ID "Windows"

#elif defined(__FreeBSD__) || defined(__FreeBSD)
# define PLATFORM_ID "FreeBSD"

#elif defined(__NetBSD__) || defined(__NetBSD)
# define PLATFORM_ID "NetBSD"

#elif defined(__OpenBSD__) || defined(__OPENBSD)
# define PLATFORM_ID "OpenBSD"

#elif defined(__sun) || defined(sun)
# define PLATFORM_ID "SunOS"

#elif defined(_AIX) || defined(__AIX) || defined(__AIX__) || defined(__aix) || defined(__aix__)
# define PLATFORM_ID "AIX"

#elif defined(__hpux) || defined(__hpux__)
# define PLATFORM_ID "HP-UX"

#elif defined(__HAIKU__)
# define PLATFORM_ID "Haiku"

#elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
# define PLATFORM_ID "BeOS"

#elif defined(__QNX__) || defined(__QNXNTO__)
# define PLATFORM_ID "QNX"

#elif defined(__tru64) || defined(_tru64) || defined(__TRU64__)
# define PLATFORM_ID "Tru64"

#elif defined(__riscos) || defined(__riscos__)
# define PLATFORM_ID "RISCos"

#elif defined(__sinix) || defined(__sinix__) || defined(__SINIX__)
# define PLATFORM_ID "SINIX"

#elif defined(__UNIX_SV__)
# define PLATFORM_ID "UNIX_SV"

#elif defined(__bsdos__)
# define PLATFORM_ID "BSDOS"

#elif defined(_MPRAS) || defined(MPRAS)
# define PLATFORM_ID "MP-RAS"

#elif defined(__osf) || defined(__osf__)
# define PLATFORM_ID "OSF1"

#elif defined(_SCO_SV) || defined(SCO_SV) || defined(sco_sv)
# define PLATFORM_ID "SCO_SV"

#elif defined(__ultrix) || defined(__ultrix__) || defined(_ULTRIX)
# define PLATFORM_ID "ULTRIX"

#elif defined(__XENIX__) || defined(_XENIX) || defined(XENIX)
# define PLATFORM_ID "Xenix"

#elif defined(__WATCOMC__)
# if defined(__LINUX__)
#  define PLATFORM_ID "Linux"

# elif defined(__DOS__)
#  define PLATFORM_ID "DOS"

# elif defined(__OS2__)
#  define PLATFORM_ID "OS2"

# elif defined(__WINDOWS__)
#  define PLATFORM_ID "Windows3x"

# else /* unknown platform */
#  define PLATFORM_ID
# endif

#elif defined(__INTEGRITY)
# if defined(INT_178B)
#  define PLATFORM_ID "Integrity178"

# else /* regular Integrity */
#  define PLATFORM_ID "Integrity"
# endif

#else /* unknown platform */
# define PLATFORM_ID

#endif

/* For windows compilers MSVC and Intel we can determine
   the architecture of the compiler being used.  This is because
   the compilers do not have flags that can change the architecture,
   but rather depend on which compiler is being used
*/
#if defined(_WIN32) && defined(_MSC_VER)
# if defined(_M_IA64)
#  define ARCHITECTURE_ID "IA64"

# elif defined(_M_X64) || defined(_M_AMD64)
#  define ARCHITECTURE_ID "x64"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# elif defined(_M_ARM64)
#  define ARCHITECTURE_ID "ARM64"

# elif defined(_M_ARM)
#  if _M_ARM == 4
#   define ARCHITECTURE_ID "ARMV4I"
#  elif _M_ARM == 5
#   define ARCHITECTURE_ID "ARMV5I"
#  else
#   define ARCHITECTURE_ID "ARMV" STRINGIFY(_M_ARM)
#  endif

# elif defined(_M_MIPS)
#  define ARCHITECTURE_ID "MIPS"

# elif defined(_M_SH)
#  define ARCHITECTURE_ID "SHx"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__WATCOMC__)
# if defined(_M_I86)
#  define ARCHITECTURE_ID "I86"

# elif defined(_M_IX86)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__IAR_SYSTEMS_ICC__) || defined(__IAR_SYSTEMS_ICC)
# if defined(__ICCARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__ICCRX__)
#  define ARCHITECTURE_ID "RX"

# elif defined(__ICCRH850__)
#  define ARCHITECTURE_ID "RH850"

# elif defined(__ICCRL78__)
#  define ARCHITECTURE_ID "RL78"

# elif defined(__ICCRISCV__)
#  define ARCHITECTURE_ID "RISCV"

# elif defined(__ICCAVR__)
#  define ARCHITECTURE_ID "AVR"

# elif defined(__ICC430__)
#  define ARCHITECTURE_ID "MSP430"

# elif defined(__ICCV850__)
#  define ARCHITECTURE_ID "V850"

# elif defined(__ICC8051__)
#  define ARCHITECTURE_ID "8051"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif

#elif defined(__ghs__)
# if defined(__PPC64__)
#  define ARCHITECTURE_ID "PPC64"

# elif defined(__ppc__)
#  define ARCHITECTURE_ID "PPC"

# elif defined(__ARM__)
#  define ARCHITECTURE_ID "ARM"

# elif defined(__x86_64__)
#  define ARCHITECTURE_ID "x64"

# elif defined(__i386__)
#  define ARCHITECTURE_ID "X86"

# else /* unknown architecture */
#  define ARCHITECTURE_ID ""
# endif
#else
#  define ARCHITECTURE_ID
#endif

/* Convert integer to decimal digit literals.  */
#define DEC(n)                   \
  ('0' + (((n) / 10000000)%10)), \
  ('0' + (((n) / 1000000)%10)),  \
  ('0' + (((n) / 100000)%10)),   \
  ('0' + (((n) / 10000)%10)),    \
  ('0' + (((n) / 1000)%10)),     \
  ('0' + (((n) / 100)%10)),      \
  ('0' + (((n) / 10)%10)),       \
  ('0' +  ((n) % 10))

/* Convert integer to hex digit literals.  */
#define HEX(n)             \
  ('0' + ((n)>>28 & 0xF)), \
  ('0' + ((n)>>24 & 0xF)), \
  ('0' + ((n)>>20 & 0xF)), \
  ('0' + ((n)>>16 & 0xF)), \
  ('0' + ((n)>>12 & 0xF)), \
  ('0' + ((n)>>8  & 0xF)), \
  ('0' + ((n)>>4  & 0xF)), \
  ('0' + ((n)     & 0xF))

/* Construct a string literal encoding the version number components. */
#ifdef COMPILER_VERSION_MAJOR
char const info_version[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','[',
  COMPILER_VERSION_MAJOR,
# ifdef COMPILER_VERSION_MINOR
  '.', COMPILER_VERSION_MINOR,
#  ifdef COMPILER_VERSION_PATCH
   '.', COMPILER_VERSION_PATCH,
#   ifdef COMPILER_VERSION_TWEAK
    '.', COMPILER_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct a string literal encoding the internal version number. */
#ifdef COMPILER_VERSION_INTERNAL
char const info_version_internal[] = {
  'I', 'N', 'F', 'O', ':',
  'c','o','m','p','i','l','e','r','_','v','e','r','s','i','o','n','_',
  'i','n','t','e','r','n','a','l','[',
  COMPILER_VERSION_INTERNAL,']','\0'};
#endif

/* Construct a string literal encoding the version number components. */
#ifdef SIMULATE_VERSION_MAJOR
char const info_simulate_version[] = {
  'I', 'N', 'F', 'O', ':',
  's','i','m','u','l','a','t','e','_','v','e','r','s','i','o','n','[',
  SIMULATE_VERSION_MAJOR,
# ifdef SIMULATE_VERSION_MINOR
  '.', SIMULATE_VERSION_MINOR,
#  ifdef SIMULATE_VERSION_PATCH
   '.', SIMULATE_VERSION_PATCH,
#   ifdef SIMULATE_VERSION_TWEAK
    '.', SIMULATE_VERSION_TWEAK,
#   endif
#  endif
# endif
  ']','\0'};
#endif

/* Construct the string literal in pieces to prevent the source from
   getting matched.  Store it in a pointer rather than an array
   because some compilers will just produce instructions to fill the
   array rather than assigning a pointer to a static array.  */
char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";
char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";




#if !defined(__STDC__)
# if (defined(_MSC_VER) && !defined(__clang__)) \
  || (defined(__ibmxl__) || defined(__IBMC__))
#  define C_DIALECT "90"
# else
#  define C_DIALECT
# endif
#elif __STDC_VERSION__ >= 201000L
# define C_DIALECT "11"
#elif __STDC_VERSION__ >= 199901L
# define C_DIALECT "99"
#else
# define C_DIALECT "90"
#endif
const char* info_language_dialect_default =
  "INFO" ":" "dialect_default[" C_DIALECT "]";

/*--------------------------------------------------------------------------*/

#ifdef ID_VOID_MAIN
void main() {}
#else
# if defined(__CLASSIC_C__)
int main(argc, argv) int argc; char *argv[];
# else
int main(int argc, char* argv[])
# endif
{
  int require = 0;
  require += info_compiler[argc];
  require += info_platform[argc];
  require += info_arch[argc];
#ifdef COMPILER_VERSION_MAJOR
  require += info_version[argc];
#endif
#ifdef COMPILER_VERSION_INTERNAL
  require += info_version_internal[argc];
#endif
#ifdef SIMULATE_ID
  require += info_simulate[argc];
#endif
#ifdef SIMULATE_VERSION_MAJOR
  require += info_simulate_version[argc];
#endif
#if defined(__CRAYXE) || defined(__CRAYXC)
  require += info_cray[argc];
#endif
  require += info_language_dialect_default[argc];
  (void)argv;
  return require;
}
#endif
 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(233):  set(COMPILER_DESCRIPTION Compiler: /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc 
Build flags: 
Id flags:  
 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(240):  if(Unix Makefiles MATCHES Visual Studio ([0-9]+) )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(402):  elseif(Unix Makefiles MATCHES Xcode )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(482):  elseif(Unix Makefiles MATCHES Green Hills MULTI )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(524):  else()
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(525):  execute_process(COMMAND /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc     CMakeCCompilerId.c WORKING_DIRECTORY /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC OUTPUT_VARIABLE CMAKE_C_COMPILER_ID_OUTPUT ERROR_VARIABLE CMAKE_C_COMPILER_ID_OUTPUT RESULT_VARIABLE CMAKE_C_COMPILER_ID_RESULT )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(540):  if(CMAKE_C_COMPILER_ID_RESULT OR CMAKE_C_COMPILER_ID_OUTPUT MATCHES Bad # preprocessor line )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(561):  else()
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(563):  file(APPEND /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/CMakeOutput.log Compiling the C compiler identification source file "CMakeCCompilerId.c" succeeded.
Compiler: /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc 
Build flags: 
Id flags:  

The output was:
0


 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(574):  string(REGEX REPLACE ([][]) [\1] _glob_id_dir /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(575):  file(GLOB files RELATIVE /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/* /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/*.xctest/* /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/*.framework/* )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(587):  list(REMOVE_ITEM files CMakeCCompilerId.c )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(588):  set(COMPILER_C_PRODUCED_FILES  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(589):  foreach(file a.out;tmp )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(590):  if(NOT IS_DIRECTORY /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/a.out )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(591):  list(APPEND COMPILER_C_PRODUCED_FILES a.out )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(592):  file(APPEND /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/CMakeOutput.log Compilation of the C compiler identification source " CMakeCCompilerId.c" produced "a.out"

 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(590):  if(NOT IS_DIRECTORY /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/tmp )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(598):  if(NOT COMPILER_C_PRODUCED_FILES )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(606):  set(COMPILER_C_PRODUCED_OUTPUT  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(610):  set(COMPILER_C_PRODUCED_FILES a.out PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(611):  set(COMPILER_C_PRODUCED_OUTPUT  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(33):  CMAKE_DETERMINE_COMPILER_ID_MATCH_VENDOR(C  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(618):  foreach(vendor  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(623):  set(CMAKE_C_COMPILER_ID  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(34):  if(CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(37):  foreach(file a.out )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(38):  CMAKE_DETERMINE_COMPILER_ID_CHECK(C /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/a.out CMakeCCompilerId.c )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(630):  if(NOT CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(632):  set(COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(633):  set(COMPILER_VERSION )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(634):  set(COMPILER_VERSION_MAJOR 0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(635):  set(COMPILER_VERSION_MINOR 0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(636):  set(COMPILER_VERSION_PATCH 0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(637):  set(COMPILER_VERSION_TWEAK 0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(638):  set(COMPILER_VERSION_INTERNAL  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(639):  set(HAVE_COMPILER_VERSION_MAJOR 0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(640):  set(HAVE_COMPILER_VERSION_MINOR 0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(641):  set(HAVE_COMPILER_VERSION_PATCH 0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(642):  set(HAVE_COMPILER_VERSION_TWEAK 0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(643):  set(COMPILER_WRAPPER )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(644):  set(DIGIT_VALUE_1 1 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(645):  set(DIGIT_VALUE_2 10 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(646):  set(DIGIT_VALUE_3 100 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(647):  set(DIGIT_VALUE_4 1000 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(648):  set(DIGIT_VALUE_5 10000 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(649):  set(DIGIT_VALUE_6 100000 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(650):  set(DIGIT_VALUE_7 1000000 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(651):  set(DIGIT_VALUE_8 10000000 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(652):  set(PLATFORM_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(653):  set(ARCHITECTURE_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(654):  set(SIMULATE_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(655):  set(SIMULATE_VERSION )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(656):  foreach(encoding  ENCODING;UTF-16LE ENCODING;UTF-16BE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(657):  file(STRINGS /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/a.out CMAKE_C_COMPILER_ID_STRINGS LIMIT_COUNT 38  REGEX .?I.?N.?F.?O.?:.?[A-Za-z0-9_]+\[[^]]*\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(660):  if(NOT CMAKE_C_COMPILER_ID_STRINGS STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(661):  break()
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(664):  set(COMPILER_ID_TWICE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(667):  list(FILTER CMAKE_C_COMPILER_ID_STRINGS EXCLUDE REGEX \?<Constant \" )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(669):  list(REMOVE_DUPLICATES CMAKE_C_COMPILER_ID_STRINGS )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(670):  foreach(info INFO:compiler[GNU];INFO:compiler_version[00000006.00000003.00000000];INFO:platform[Linux];INFO:arch[];INFO:dialect_default[11] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(674):  if(INFO:compiler[GNU] MATCHES (.)I.N.F.O.:. )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(677):  if(INFO:compiler[GNU] MATCHES INFO:compiler\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(678):  if(COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(681):  set(COMPILER_ID GNU )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(683):  if(INFO:compiler[GNU] MATCHES INFO:platform\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(686):  if(INFO:compiler[GNU] MATCHES INFO:arch\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(689):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(693):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_internal\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(697):  foreach(comp MAJOR MINOR PATCH TWEAK )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MAJOR_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MAJOR_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MAJOR_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MAJOR_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MAJOR_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MAJOR_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MAJOR_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MAJOR_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MAJOR_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MINOR_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MINOR_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MINOR_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MINOR_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MINOR_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MINOR_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MINOR_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MINOR_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_MINOR_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_PATCH_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_PATCH_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_PATCH_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_PATCH_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_PATCH_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_PATCH_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_PATCH_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_PATCH_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_PATCH_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_TWEAK_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_TWEAK_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_TWEAK_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_TWEAK_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_TWEAK_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_TWEAK_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_TWEAK_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_TWEAK_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler[GNU] MATCHES INFO:compiler_version_TWEAK_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(706):  if(INFO:compiler[GNU] MATCHES INFO:compiler_wrapper\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(709):  if(INFO:compiler[GNU] MATCHES INFO:simulate\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(712):  if(INFO:compiler[GNU] MATCHES INFO:simulate_version\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(716):  if(INFO:compiler[GNU] MATCHES INFO:qnxnto\[\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(719):  if(INFO:compiler[GNU] MATCHES INFO:dialect_default\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(674):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES (.)I.N.F.O.:. )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(677):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(683):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:platform\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(686):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:arch\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(689):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(690):  string(REGEX REPLACE ^0+([0-9]+) \1 COMPILER_VERSION 00000006.00000003.00000000 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(691):  string(REGEX REPLACE \.0+([0-9]) .\1 COMPILER_VERSION 6.00000003.00000000 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(693):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_internal\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(697):  foreach(comp MAJOR MINOR PATCH TWEAK )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MAJOR_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MAJOR_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MAJOR_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MAJOR_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MAJOR_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MAJOR_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MAJOR_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MAJOR_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MAJOR_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MINOR_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MINOR_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MINOR_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MINOR_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MINOR_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MINOR_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MINOR_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MINOR_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_MINOR_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_PATCH_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_PATCH_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_PATCH_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_PATCH_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_PATCH_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_PATCH_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_PATCH_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_PATCH_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_PATCH_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_TWEAK_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_TWEAK_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_TWEAK_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_TWEAK_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_TWEAK_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_TWEAK_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_TWEAK_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_TWEAK_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_version_TWEAK_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(706):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:compiler_wrapper\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(709):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:simulate\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(712):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:simulate_version\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(716):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:qnxnto\[\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(719):  if(INFO:compiler_version[00000006.00000003.00000000] MATCHES INFO:dialect_default\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(674):  if(INFO:platform[Linux] MATCHES (.)I.N.F.O.:. )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(677):  if(INFO:platform[Linux] MATCHES INFO:compiler\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(683):  if(INFO:platform[Linux] MATCHES INFO:platform\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(684):  set(PLATFORM_ID Linux )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(686):  if(INFO:platform[Linux] MATCHES INFO:arch\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(689):  if(INFO:platform[Linux] MATCHES INFO:compiler_version\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(693):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_internal\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(697):  foreach(comp MAJOR MINOR PATCH TWEAK )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MAJOR_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MAJOR_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MAJOR_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MAJOR_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MAJOR_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MAJOR_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MAJOR_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MAJOR_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MAJOR_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MINOR_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MINOR_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MINOR_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MINOR_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MINOR_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MINOR_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MINOR_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MINOR_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_MINOR_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_PATCH_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_PATCH_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_PATCH_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_PATCH_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_PATCH_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_PATCH_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_PATCH_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_PATCH_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_PATCH_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_TWEAK_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_TWEAK_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_TWEAK_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_TWEAK_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_TWEAK_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_TWEAK_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_TWEAK_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_TWEAK_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:platform[Linux] MATCHES INFO:compiler_version_TWEAK_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(706):  if(INFO:platform[Linux] MATCHES INFO:compiler_wrapper\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(709):  if(INFO:platform[Linux] MATCHES INFO:simulate\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(712):  if(INFO:platform[Linux] MATCHES INFO:simulate_version\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(716):  if(INFO:platform[Linux] MATCHES INFO:qnxnto\[\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(719):  if(INFO:platform[Linux] MATCHES INFO:dialect_default\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(674):  if(INFO:arch[] MATCHES (.)I.N.F.O.:. )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(677):  if(INFO:arch[] MATCHES INFO:compiler\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(683):  if(INFO:arch[] MATCHES INFO:platform\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(686):  if(INFO:arch[] MATCHES INFO:arch\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(687):  set(ARCHITECTURE_ID  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(689):  if(INFO:arch[] MATCHES INFO:compiler_version\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(693):  if(INFO:arch[] MATCHES INFO:compiler_version_internal\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(697):  foreach(comp MAJOR MINOR PATCH TWEAK )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MAJOR_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MAJOR_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MAJOR_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MAJOR_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MAJOR_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MAJOR_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MAJOR_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MAJOR_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MAJOR_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MINOR_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MINOR_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MINOR_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MINOR_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MINOR_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MINOR_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MINOR_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MINOR_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_MINOR_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_PATCH_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_PATCH_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_PATCH_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_PATCH_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_PATCH_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_PATCH_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_PATCH_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_PATCH_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_PATCH_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_TWEAK_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_TWEAK_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_TWEAK_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_TWEAK_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_TWEAK_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_TWEAK_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_TWEAK_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_TWEAK_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:arch[] MATCHES INFO:compiler_version_TWEAK_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(706):  if(INFO:arch[] MATCHES INFO:compiler_wrapper\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(709):  if(INFO:arch[] MATCHES INFO:simulate\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(712):  if(INFO:arch[] MATCHES INFO:simulate_version\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(716):  if(INFO:arch[] MATCHES INFO:qnxnto\[\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(719):  if(INFO:arch[] MATCHES INFO:dialect_default\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(674):  if(INFO:dialect_default[11] MATCHES (.)I.N.F.O.:. )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(677):  if(INFO:dialect_default[11] MATCHES INFO:compiler\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(683):  if(INFO:dialect_default[11] MATCHES INFO:platform\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(686):  if(INFO:dialect_default[11] MATCHES INFO:arch\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(689):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(693):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_internal\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(697):  foreach(comp MAJOR MINOR PATCH TWEAK )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MAJOR_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MAJOR_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MAJOR_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MAJOR_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MAJOR_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MAJOR_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MAJOR_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MAJOR_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MAJOR_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MINOR_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MINOR_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MINOR_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MINOR_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MINOR_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MINOR_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MINOR_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MINOR_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_MINOR_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_PATCH_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_PATCH_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_PATCH_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_PATCH_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_PATCH_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_PATCH_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_PATCH_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_PATCH_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_PATCH_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(698):  foreach(digit 1 2 3 4 5 6 7 8 9 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_TWEAK_digit_1\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_TWEAK_digit_2\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_TWEAK_digit_3\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_TWEAK_digit_4\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_TWEAK_digit_5\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_TWEAK_digit_6\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_TWEAK_digit_7\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_TWEAK_digit_8\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(699):  if(INFO:dialect_default[11] MATCHES INFO:compiler_version_TWEAK_digit_9\[([0-9])\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(706):  if(INFO:dialect_default[11] MATCHES INFO:compiler_wrapper\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(709):  if(INFO:dialect_default[11] MATCHES INFO:simulate\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(712):  if(INFO:dialect_default[11] MATCHES INFO:simulate_version\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(716):  if(INFO:dialect_default[11] MATCHES INFO:qnxnto\[\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(719):  if(INFO:dialect_default[11] MATCHES INFO:dialect_default\[([^]"]*)\] )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(720):  set(CMAKE_C_STANDARD_COMPUTED_DEFAULT 11 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(725):  if(NOT DEFINED COMPILER_VERSION AND HAVE_COMPILER_VERSION_MAJOR )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(739):  if(WIN32 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(768):  if(COMPILER_ID AND NOT COMPILER_ID_TWICE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(769):  set(CMAKE_C_COMPILER_ID GNU )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(770):  set(CMAKE_C_PLATFORM_ID Linux )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(771):  set(CMAKE_C_COMPILER_ARCHITECTURE_ID  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(772):  set(MSVC_C_ARCHITECTURE_ID  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(773):  set(CMAKE_C_COMPILER_VERSION 6.3.0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(774):  set(CMAKE_C_COMPILER_VERSION_INTERNAL  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(775):  set(CMAKE_C_SIMULATE_ID  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(776):  set(CMAKE_C_SIMULATE_VERSION  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(780):  if(CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(782):  file(APPEND /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/CMakeOutput.log The C compiler identification is GNU, found in " /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/a.out"

 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(794):  if(NOT CMAKE_EXECUTABLE_FORMAT )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(795):  file(READ /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CompilerIdC/a.out CMAKE_EXECUTABLE_MAGIC LIMIT 4 HEX )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(798):  if(7f454c46 STREQUAL 7f454c46 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(799):  set(CMAKE_EXECUTABLE_FORMAT ELF CACHE INTERNAL Executable file format )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(808):  if(7f454c46 MATCHES feedface|cefaedfe|feedfacf|cffaedfe )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(813):  if(NOT DEFINED CMAKE_EXECUTABLE_FORMAT )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(817):  set(CMAKE_C_COMPILER_ID GNU PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(818):  set(CMAKE_C_PLATFORM_ID Linux PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(819):  set(CMAKE_C_COMPILER_ARCHITECTURE_ID  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(820):  set(MSVC_C_ARCHITECTURE_ID  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(822):  set(CMAKE_C_COMPILER_VERSION 6.3.0 PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(823):  set(CMAKE_C_COMPILER_VERSION_INTERNAL  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(824):  set(CMAKE_C_COMPILER_WRAPPER  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(825):  set(CMAKE_C_SIMULATE_ID  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(826):  set(CMAKE_C_SIMULATE_VERSION  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(827):  set(CMAKE_EXECUTABLE_FORMAT ELF PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(828):  set(COMPILER_QNXNTO  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(829):  set(CMAKE_C_STANDARD_COMPUTED_DEFAULT 11 PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(40):  if(CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(41):  break()
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(44):  if(CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(45):  break()
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(50):  if(CMAKE_C_COMPILER_ID_TOOL )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(53):  elseif(NOT CMAKE_C_COMPILER )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(58):  if(CMAKE_C_COMPILER AND NOT CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(65):  if(NOT CMAKE_C_COMPILER_ID AND Unix Makefiles MATCHES Green Hills MULTI )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(72):  if(lang STREQUAL CUDA AND CMAKE_C_COMPILER_ID STREQUAL NVIDIA AND NOT CMAKE_C_COMPILER_VERSION )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(88):  if(lang STREQUAL Swift AND CMAKE_C_COMPILER AND NOT CMAKE_C_COMPILER_VERSION )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(111):  if(COMPILER_QNXNTO AND CMAKE_C_COMPILER_ID STREQUAL GNU )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(127):  if(NOT CMAKE_EXECUTABLE_FORMAT )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(131):  if(CMAKE_GENERATOR STREQUAL Ninja AND MSVC_C_ARCHITECTURE_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(135):  else()
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(136):  set(CMAKE_C_CL_SHOWINCLUDES_PREFIX  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(139):  set(_variant  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(140):  if(xGNU STREQUAL xClang )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(160):  else()
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(161):  set(CMAKE_C_COMPILER_FRONTEND_VARIANT  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(165):  if(CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(166):  if(CMAKE_C_COMPILER_VERSION )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(167):  set(_version  6.3.0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(171):  if(CMAKE_C_COMPILER_ARCHITECTURE_ID AND xGNU STREQUAL xIAR )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(173):  else()
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(174):  set(_archid  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(176):  message(STATUS The C compiler identification is  GNU 6.3.0 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(178):  unset(_archid )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(179):  unset(_version )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(180):  unset(_variant )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(185):  set(CMAKE_C_COMPILER_ID GNU PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(186):  set(CMAKE_C_PLATFORM_ID Linux PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(187):  set(CMAKE_C_COMPILER_ARCHITECTURE_ID  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(188):  set(MSVC_C_ARCHITECTURE_ID  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(190):  set(CMAKE_C_XCODE_ARCHS  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(191):  set(CMAKE_C_CL_SHOWINCLUDES_PREFIX  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(192):  set(CMAKE_C_COMPILER_FRONTEND_VARIANT  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(193):  set(CMAKE_C_COMPILER_VERSION 6.3.0 PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(194):  set(CMAKE_C_COMPILER_VERSION_INTERNAL  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(195):  set(CMAKE_C_COMPILER_WRAPPER  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(196):  set(CMAKE_C_SIMULATE_ID  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(197):  set(CMAKE_C_SIMULATE_VERSION  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(198):  set(CMAKE_C_STANDARD_COMPUTED_DEFAULT 11 PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(199):  set(CMAKE_C_COMPILER_PRODUCED_OUTPUT  PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCompilerId.cmake(200):  set(CMAKE_C_COMPILER_PRODUCED_FILES a.out PARENT_SCOPE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(119):  if(CMAKE_C_COMPILER_ID STREQUAL GNU )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(120):  set(CMAKE_COMPILER_IS_GNUCC 1 )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(122):  if(CMAKE_C_PLATFORM_ID MATCHES MinGW )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(124):  elseif(CMAKE_C_PLATFORM_ID MATCHES Cygwin )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(145):  if(NOT _CMAKE_TOOLCHAIN_LOCATION )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(146):  get_filename_component(_CMAKE_TOOLCHAIN_LOCATION /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc PATH )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(156):  if(CMAKE_CROSSCOMPILING AND NOT _CMAKE_TOOLCHAIN_PREFIX )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(158):  if(CMAKE_C_COMPILER_ID MATCHES GNU|Clang|QCC )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(159):  get_filename_component(COMPILER_BASENAME /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc NAME )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(160):  if(COMPILER_BASENAME MATCHES ^(.+-)(clang|g?cc)(-[0-9]+(\.[0-9]+)*)?(-[^.]+)?(\.exe)?$ )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(161):  set(_CMAKE_TOOLCHAIN_PREFIX csky-linux- )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(162):  set(_CMAKE_COMPILER_SUFFIX  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(175):  if(csky-linux- MATCHES (.+-)?llvm-$ )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(189):  set(_CMAKE_PROCESSING_LANGUAGE C )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(190):  include(CMakeFindBinUtils )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(24):  function(__resolve_tool_path CMAKE_TOOL SEARCH_PATH DOCSTRING )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(57):  __resolve_tool_path(CMAKE_LINKER /home/user/hyperscale/buildroot/output/host/bin Default Linker )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(26):  if(CMAKE_LINKER )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(58):  __resolve_tool_path(CMAKE_MT /home/user/hyperscale/buildroot/output/host/bin Default Manifest Tool )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(26):  if(CMAKE_MT )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(60):  set(_CMAKE_TOOL_VARS  )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(63):  if(( x STREQUAL xMSVC AND ( x STREQUAL xMSVC OR NOT xGNU STREQUAL xClang ) ) OR xGNU STREQUAL xMSVC OR ( CMAKE_HOST_WIN32 AND xGNU STREQUAL xPGI ) OR ( CMAKE_HOST_WIN32 AND xGNU STREQUAL xNVIDIA ) OR ( CMAKE_GENERATOR MATCHES Visual Studio AND NOT CMAKE_VS_PLATFORM_NAME STREQUAL Tegra-Android ) )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(83):  else()
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(84):  if(CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(87):  if(CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(91):  if(GNU STREQUAL Clang )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(104):  find_program(CMAKE_AR NAMES csky-linux-ar  HINTS /home/user/hyperscale/buildroot/output/host/bin )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(106):  find_program(CMAKE_RANLIB NAMES csky-linux-ranlib  HINTS /home/user/hyperscale/buildroot/output/host/bin )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(107):  if(NOT CMAKE_RANLIB )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(112):  find_program(CMAKE_STRIP NAMES csky-linux-strip  HINTS /home/user/hyperscale/buildroot/output/host/bin )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(113):  find_program(CMAKE_LINKER NAMES csky-linux-ld  HINTS /home/user/hyperscale/buildroot/output/host/bin )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(114):  find_program(CMAKE_NM NAMES csky-linux-nm  HINTS /home/user/hyperscale/buildroot/output/host/bin )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(115):  find_program(CMAKE_OBJDUMP NAMES csky-linux-objdump  HINTS /home/user/hyperscale/buildroot/output/host/bin )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(116):  find_program(CMAKE_OBJCOPY NAMES csky-linux-objcopy  HINTS /home/user/hyperscale/buildroot/output/host/bin )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(117):  find_program(CMAKE_READELF NAMES csky-linux-readelf  HINTS /home/user/hyperscale/buildroot/output/host/bin )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(118):  find_program(CMAKE_DLLTOOL NAMES csky-linux-dlltool  HINTS /home/user/hyperscale/buildroot/output/host/bin )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(119):  find_program(CMAKE_ADDR2LINE NAMES csky-linux-addr2line  HINTS /home/user/hyperscale/buildroot/output/host/bin )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(121):  list(APPEND _CMAKE_TOOL_VARS AR RANLIB STRIP LINKER NM OBJDUMP OBJCOPY READELF DLLTOOL ADDR2LINE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(124):  if(CMAKE_PLATFORM_HAS_INSTALLNAME )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(135):  foreach(var IN LISTS _CMAKE_TOOL_VARS )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(136):  get_property(_CMAKE_TOOL_CACHED CACHE CMAKE_AR PROPERTY TYPE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(137):  if(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(138):  mark_as_advanced(CMAKE_AR )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(140):  unset(_CMAKE_ADDITIONAL_AR_NAMES )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(136):  get_property(_CMAKE_TOOL_CACHED CACHE CMAKE_RANLIB PROPERTY TYPE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(137):  if(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(138):  mark_as_advanced(CMAKE_RANLIB )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(140):  unset(_CMAKE_ADDITIONAL_RANLIB_NAMES )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(136):  get_property(_CMAKE_TOOL_CACHED CACHE CMAKE_STRIP PROPERTY TYPE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(137):  if(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(138):  mark_as_advanced(CMAKE_STRIP )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(140):  unset(_CMAKE_ADDITIONAL_STRIP_NAMES )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(136):  get_property(_CMAKE_TOOL_CACHED CACHE CMAKE_LINKER PROPERTY TYPE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(137):  if(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(138):  mark_as_advanced(CMAKE_LINKER )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(140):  unset(_CMAKE_ADDITIONAL_LINKER_NAMES )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(136):  get_property(_CMAKE_TOOL_CACHED CACHE CMAKE_NM PROPERTY TYPE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(137):  if(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(138):  mark_as_advanced(CMAKE_NM )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(140):  unset(_CMAKE_ADDITIONAL_NM_NAMES )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(136):  get_property(_CMAKE_TOOL_CACHED CACHE CMAKE_OBJDUMP PROPERTY TYPE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(137):  if(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(138):  mark_as_advanced(CMAKE_OBJDUMP )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(140):  unset(_CMAKE_ADDITIONAL_OBJDUMP_NAMES )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(136):  get_property(_CMAKE_TOOL_CACHED CACHE CMAKE_OBJCOPY PROPERTY TYPE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(137):  if(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(138):  mark_as_advanced(CMAKE_OBJCOPY )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(140):  unset(_CMAKE_ADDITIONAL_OBJCOPY_NAMES )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(136):  get_property(_CMAKE_TOOL_CACHED CACHE CMAKE_READELF PROPERTY TYPE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(137):  if(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(138):  mark_as_advanced(CMAKE_READELF )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(140):  unset(_CMAKE_ADDITIONAL_READELF_NAMES )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(136):  get_property(_CMAKE_TOOL_CACHED CACHE CMAKE_DLLTOOL PROPERTY TYPE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(137):  if(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(138):  mark_as_advanced(CMAKE_DLLTOOL )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(140):  unset(_CMAKE_ADDITIONAL_DLLTOOL_NAMES )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(136):  get_property(_CMAKE_TOOL_CACHED CACHE CMAKE_ADDR2LINE PROPERTY TYPE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(137):  if(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(138):  mark_as_advanced(CMAKE_ADDR2LINE )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(140):  unset(_CMAKE_ADDITIONAL_ADDR2LINE_NAMES )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(142):  unset(_CMAKE_TOOL_VARS )
/usr/share/cmake-3.16/Modules/CMakeFindBinUtils.cmake(143):  unset(_CMAKE_TOOL_CACHED )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(191):  include(Compiler/GNU-FindBinUtils OPTIONAL )
/usr/share/cmake-3.16/Modules/Compiler/GNU-FindBinUtils.cmake(1):  if(NOT DEFINED _CMAKE_PROCESSING_LANGUAGE OR _CMAKE_PROCESSING_LANGUAGE STREQUAL  )
/usr/share/cmake-3.16/Modules/Compiler/GNU-FindBinUtils.cmake(8):  string(REGEX MATCH ^([0-9]+) __version_x 6.3.0 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-FindBinUtils.cmake(11):  string(REGEX MATCH ^([0-9]+\.[0-9]+) __version_x_y 6.3.0 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-FindBinUtils.cmake(15):  get_filename_component(__gcc_hints /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc DIRECTORY )
/usr/share/cmake-3.16/Modules/Compiler/GNU-FindBinUtils.cmake(18):  find_program(CMAKE_C_COMPILER_AR NAMES csky-linux-gcc-ar-6.3 csky-linux-gcc-ar-6 csky-linux-gcc-ar HINTS /home/user/hyperscale/buildroot/output/host/bin DOC A wrapper around 'ar' adding the appropriate '--plugin' option for the GCC compiler )
/usr/share/cmake-3.16/Modules/Compiler/GNU-FindBinUtils.cmake(25):  mark_as_advanced(CMAKE_C_COMPILER_AR )
/usr/share/cmake-3.16/Modules/Compiler/GNU-FindBinUtils.cmake(28):  find_program(CMAKE_C_COMPILER_RANLIB NAMES csky-linux-gcc-ranlib-6.3 csky-linux-gcc-ranlib-6 csky-linux-gcc-ranlib HINTS /home/user/hyperscale/buildroot/output/host/bin DOC A wrapper around 'ranlib' adding the appropriate '--plugin' option for the GCC compiler )
/usr/share/cmake-3.16/Modules/Compiler/GNU-FindBinUtils.cmake(35):  mark_as_advanced(CMAKE_C_COMPILER_RANLIB )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(192):  unset(_CMAKE_PROCESSING_LANGUAGE )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(194):  if(CMAKE_C_COMPILER_ARCHITECTURE_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(197):  else()
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(198):  set(_SET_CMAKE_C_COMPILER_ARCHITECTURE_ID  )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(201):  if(MSVC_C_ARCHITECTURE_ID )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(206):  if(CMAKE_C_XCODE_ARCHS )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(212):  configure_file(/usr/share/cmake-3.16/Modules/CMakeCCompiler.cmake.in /home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake @ONLY )
/usr/share/cmake-3.16/Modules/CMakeDetermineCCompiler.cmake(216):  set(CMAKE_C_COMPILER_ENV_VAR CC )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(1):  set(CMAKE_C_COMPILER /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(2):  set(CMAKE_C_COMPILER_ARG1  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(3):  set(CMAKE_C_COMPILER_ID GNU )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(4):  set(CMAKE_C_COMPILER_VERSION 6.3.0 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(5):  set(CMAKE_C_COMPILER_VERSION_INTERNAL  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(6):  set(CMAKE_C_COMPILER_WRAPPER  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(7):  set(CMAKE_C_STANDARD_COMPUTED_DEFAULT 11 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(8):  set(CMAKE_C_COMPILE_FEATURES  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(9):  set(CMAKE_C90_COMPILE_FEATURES  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(10):  set(CMAKE_C99_COMPILE_FEATURES  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(11):  set(CMAKE_C11_COMPILE_FEATURES  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(13):  set(CMAKE_C_PLATFORM_ID Linux )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(14):  set(CMAKE_C_SIMULATE_ID  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(15):  set(CMAKE_C_COMPILER_FRONTEND_VARIANT  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(16):  set(CMAKE_C_SIMULATE_VERSION  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(20):  set(CMAKE_AR /home/user/hyperscale/buildroot/output/host/bin/csky-linux-ar )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(21):  set(CMAKE_C_COMPILER_AR /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc-ar )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(22):  set(CMAKE_RANLIB /home/user/hyperscale/buildroot/output/host/bin/csky-linux-ranlib )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(23):  set(CMAKE_C_COMPILER_RANLIB /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc-ranlib )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(24):  set(CMAKE_LINKER /home/user/hyperscale/buildroot/output/host/bin/csky-linux-ld )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(25):  set(CMAKE_MT  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(26):  set(CMAKE_COMPILER_IS_GNUCC 1 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(27):  set(CMAKE_C_COMPILER_LOADED 1 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(28):  set(CMAKE_C_COMPILER_WORKS TRUE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(29):  set(CMAKE_C_ABI_COMPILED )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(30):  set(CMAKE_COMPILER_IS_MINGW )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(31):  set(CMAKE_COMPILER_IS_CYGWIN )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(32):  if(CMAKE_COMPILER_IS_CYGWIN )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(37):  set(CMAKE_C_COMPILER_ENV_VAR CC )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(39):  if(CMAKE_COMPILER_IS_MINGW )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(42):  set(CMAKE_C_COMPILER_ID_RUN 1 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(43):  set(CMAKE_C_SOURCE_FILE_EXTENSIONS c;m )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(44):  set(CMAKE_C_IGNORE_EXTENSIONS h;H;o;O;obj;OBJ;def;DEF;rc;RC )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(45):  set(CMAKE_C_LINKER_PREFERENCE 10 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(48):  set(CMAKE_C_SIZEOF_DATA_PTR  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(49):  set(CMAKE_C_COMPILER_ABI  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(50):  set(CMAKE_C_LIBRARY_ARCHITECTURE  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(52):  if(CMAKE_C_SIZEOF_DATA_PTR )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(56):  if(CMAKE_C_COMPILER_ABI )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(60):  if(CMAKE_C_LIBRARY_ARCHITECTURE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(64):  set(CMAKE_C_CL_SHOWINCLUDES_PREFIX  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(65):  if(CMAKE_C_CL_SHOWINCLUDES_PREFIX )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(73):  set(CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(74):  set(CMAKE_C_IMPLICIT_LINK_LIBRARIES  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(75):  set(CMAKE_C_IMPLICIT_LINK_DIRECTORIES  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeFiles/3.16.3/CMakeCCompiler.cmake(76):  set(CMAKE_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES  )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(14):  set(APPLE )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(15):  set(UNIX )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(16):  set(CYGWIN )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(17):  set(WIN32 )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(21):  include(CMakeGenericSystem )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(4):  include(CMakeInitializeConfigs )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(4):  include_guard(GLOBAL )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(8):  function(cmake_initialize_per_config_variable _PREFIX _DOCSTRING )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(6):  set(CMAKE_SHARED_LIBRARY_C_FLAGS  )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(7):  set(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS -shared )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(8):  set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS  )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(9):  set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG  )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(10):  set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP  )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(11):  set(CMAKE_INCLUDE_FLAG_C -I )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(12):  set(CMAKE_LIBRARY_PATH_FLAG -L )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(13):  set(CMAKE_LIBRARY_PATH_TERMINATOR  )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(14):  set(CMAKE_LINK_LIBRARY_FLAG -l )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(16):  set(CMAKE_LINK_LIBRARY_SUFFIX  )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(17):  set(CMAKE_STATIC_LIBRARY_PREFIX lib )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(18):  set(CMAKE_STATIC_LIBRARY_SUFFIX .a )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(19):  set(CMAKE_SHARED_LIBRARY_PREFIX lib )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(20):  set(CMAKE_SHARED_LIBRARY_SUFFIX .so )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(21):  set(CMAKE_EXECUTABLE_SUFFIX  )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(22):  set(CMAKE_DL_LIBS dl )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(24):  set(CMAKE_FIND_LIBRARY_PREFIXES lib )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(25):  set(CMAKE_FIND_LIBRARY_SUFFIXES .so .a )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(27):  set(CMAKE_AUTOGEN_ORIGIN_DEPENDS ON )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(28):  set(CMAKE_AUTOMOC_COMPILER_PREDEFINES ON )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(29):  set(CMAKE_AUTOMOC_PATH_PREFIX ON )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(30):  set(CMAKE_AUTOMOC_MACRO_NAMES Q_OBJECT Q_GADGET Q_NAMESPACE )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(33):  set_property(GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(35):  set(CMAKE_SKIP_RPATH NO CACHE BOOL If set, runtime paths are not added when using shared libraries. )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(37):  set(CMAKE_SKIP_INSTALL_RPATH NO CACHE BOOL If set, runtime paths are not added when installing shared libraries, but are added when building. )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(40):  set(CMAKE_VERBOSE_MAKEFILE FALSE CACHE BOOL If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo. )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(42):  if(CMAKE_GENERATOR MATCHES Make )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(43):  set(CMAKE_COLOR_MAKEFILE ON CACHE BOOL Enable/Disable color output during build. )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(46):  mark_as_advanced(CMAKE_COLOR_MAKEFILE )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(47):  if(DEFINED CMAKE_RULE_MESSAGES )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(50):  if(DEFINED CMAKE_TARGET_MESSAGES )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(53):  if(CMAKE_GENERATOR MATCHES Unix Makefiles )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(54):  set(CMAKE_EXPORT_COMPILE_COMMANDS OFF CACHE BOOL Enable/Disable output of compile commands during generation. )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(57):  mark_as_advanced(CMAKE_EXPORT_COMPILE_COMMANDS )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(61):  if(CMAKE_GENERATOR MATCHES Ninja )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(75):  function(GetDefaultWindowsPrefixBase var )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(163):  if(NOT DEFINED CMAKE_INSTALL_PREFIX )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(164):  set(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT 1 )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(168):  if(CMAKE_HOST_UNIX )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(169):  set(CMAKE_INSTALL_PREFIX /usr/local CACHE PATH Install path prefix, prepended onto install directories. )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(181):  set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME Unspecified )
/usr/share/cmake-3.16/Modules/CMakeGenericSystem.cmake(183):  mark_as_advanced(CMAKE_SKIP_RPATH CMAKE_SKIP_INSTALL_RPATH CMAKE_VERBOSE_MAKEFILE )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(24):  set(CMAKE_SYSTEM_INFO_FILE Platform/Linux )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(26):  include(Platform/Linux OPTIONAL RESULT_VARIABLE _INCLUDED_SYSTEM_INFO_FILE )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(1):  set(CMAKE_DL_LIBS dl )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(2):  set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG -Wl,-rpath, )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(3):  set(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP : )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(4):  set(CMAKE_SHARED_LIBRARY_RPATH_ORIGIN_TOKEN $ORIGIN )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(5):  set(CMAKE_SHARED_LIBRARY_RPATH_LINK_C_FLAG -Wl,-rpath-link, )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(6):  set(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG -Wl,-soname, )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(7):  set(CMAKE_EXE_EXPORTS_C_FLAG -Wl,--export-dynamic )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(11):  set(CMAKE_PLATFORM_USES_PATH_WHEN_NO_SONAME 1 )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(17):  foreach(type SHARED_LIBRARY SHARED_MODULE EXE )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(18):  set(CMAKE_SHARED_LIBRARY_LINK_STATIC_C_FLAGS -Wl,-Bstatic )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(19):  set(CMAKE_SHARED_LIBRARY_LINK_DYNAMIC_C_FLAGS -Wl,-Bdynamic )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(18):  set(CMAKE_SHARED_MODULE_LINK_STATIC_C_FLAGS -Wl,-Bstatic )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(19):  set(CMAKE_SHARED_MODULE_LINK_DYNAMIC_C_FLAGS -Wl,-Bdynamic )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(18):  set(CMAKE_EXE_LINK_STATIC_C_FLAGS -Wl,-Bstatic )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(19):  set(CMAKE_EXE_LINK_DYNAMIC_C_FLAGS -Wl,-Bdynamic )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(30):  if(DEFINED CMAKE_INSTALL_SO_NO_EXE )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(35):  else()
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(40):  if(EXISTS /etc/debian_version )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(41):  set(CMAKE_INSTALL_SO_NO_EXE 1 CACHE INTERNAL Install .so files without execute permission. )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(50):  set(CMAKE_LIBRARY_ARCHITECTURE_REGEX [a-z0-9_]+(-[a-z0-9_]+)?-linux-gnu[a-z0-9_]* )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(52):  include(Platform/UnixPaths )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(10):  if(__UNIX_PATHS_INCLUDED )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(13):  set(__UNIX_PATHS_INCLUDED 1 )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(15):  set(UNIX 1 )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(19):  get_filename_component(_CMAKE_INSTALL_DIR /usr/share/cmake-3.16 PATH )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(20):  get_filename_component(_CMAKE_INSTALL_DIR /usr/share PATH )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(24):  list(APPEND CMAKE_SYSTEM_PREFIX_PATH /usr/local /usr / /usr )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(31):  if(NOT CMAKE_FIND_NO_INSTALL_PREFIX )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(32):  list(APPEND CMAKE_SYSTEM_PREFIX_PATH /usr/local )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(36):  if(CMAKE_STAGING_PREFIX )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(45):  list(APPEND CMAKE_SYSTEM_PREFIX_PATH /usr/X11R6 /usr/pkg /opt )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(52):  list(APPEND CMAKE_SYSTEM_INCLUDE_PATH /usr/include/X11 )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(57):  list(APPEND CMAKE_SYSTEM_LIBRARY_PATH /usr/lib/X11 )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(62):  list(APPEND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES /lib /lib32 /lib64 /usr/lib /usr/lib32 /usr/lib64 )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(66):  if(CMAKE_SYSROOT_COMPILE )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(68):  else()
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(69):  set(_cmake_sysroot_compile /home/user/hyperscale/buildroot/output/host/csky-buildroot-linux-uclibcabiv1/sysroot )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(74):  set(_CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES_INIT  /home/user/hyperscale/buildroot/output/host/csky-buildroot-linux-uclibcabiv1/sysroot/usr/include )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(78):  set(_CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES_INIT  /home/user/hyperscale/buildroot/output/host/csky-buildroot-linux-uclibcabiv1/sysroot/usr/include )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(82):  set(_CMAKE_CUDA_IMPLICIT_INCLUDE_DIRECTORIES_INIT  /home/user/hyperscale/buildroot/output/host/csky-buildroot-linux-uclibcabiv1/sysroot/usr/include )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(87):  unset(_cmake_sysroot_compile )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(90):  set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB32_PATHS TRUE )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(91):  set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIB64_PATHS TRUE )
/usr/share/cmake-3.16/Modules/Platform/UnixPaths.cmake(92):  set_property(GLOBAL PROPERTY FIND_LIBRARY_USE_LIBX32_PATHS TRUE )
/usr/share/cmake-3.16/Modules/Platform/Linux.cmake(56):  if(NOT CMAKE_CROSSCOMPILING AND EXISTS /etc/debian_version )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(28):  if(NOT _INCLUDED_SYSTEM_INFO_FILE )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(42):  if(CMAKE_EXTRA_GENERATOR )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(52):  if(NOT CMAKE_MODULE_EXISTS )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(53):  set(CMAKE_SHARED_MODULE_PREFIX lib )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(54):  set(CMAKE_SHARED_MODULE_SUFFIX .so )
/usr/share/cmake-3.16/Modules/CMakeSystemSpecificInformation.cmake(58):  set(CMAKE_SYSTEM_SPECIFIC_INFORMATION_LOADED 1 )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(11):  include(CMakeLanguageInformation )
/usr/share/cmake-3.16/Modules/CMakeLanguageInformation.cmake(9):  macro(__cmake_include_compiler_wrapper lang )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(15):  if(UNIX )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(16):  set(CMAKE_C_OUTPUT_EXTENSION .o )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(21):  set(_INCLUDED_FILE 0 )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(24):  if(CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(25):  include(Compiler/GNU-C OPTIONAL )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(1):  include(Compiler/GNU )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(6):  if(__COMPILER_GNU )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(9):  set(__COMPILER_GNU 1 )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(11):  include(Compiler/CMakeCommonCompilerMacros )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(5):  if(__COMPILER_CMAKE_COMMON_COMPILER_MACROS )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(8):  set(__COMPILER_CMAKE_COMMON_COMPILER_MACROS 1 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(32):  macro(__compiler_check_default_language_standard lang stdver1 std1 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(65):  macro(cmake_record_c_compile_features )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(94):  macro(cmake_record_cxx_compile_features )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(12):  include(Internal/CMakeCheckCompilerFlag )
/usr/share/cmake-3.16/Modules/Internal/CMakeCheckCompilerFlag.cmake(39):  include_guard(GLOBAL )
/usr/share/cmake-3.16/Modules/Internal/CMakeCheckCompilerFlag.cmake(40):  include(CMakeCheckCompilerFlagCommonPatterns )
/usr/share/cmake-3.16/Modules/CMakeCheckCompilerFlagCommonPatterns.cmake(9):  macro(CHECK_COMPILER_FLAG_COMMON_PATTERNS _VAR )
/usr/share/cmake-3.16/Modules/Internal/CMakeCheckCompilerFlag.cmake(42):  function(CMAKE_CHECK_COMPILER_FLAG lang flag result )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(14):  set(__pch_header_C c-header )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(15):  set(__pch_header_CXX c++-header )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(16):  set(__pch_header_OBJC objective-c-header )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(17):  set(__pch_header_OBJCXX objective-c++-header )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(19):  macro(__compiler_gnu lang )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(2):  __compiler_gnu(C )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(21):  set(CMAKE_C_VERBOSE_FLAG -v )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(22):  set(CMAKE_C_COMPILE_OPTIONS_PIC -fPIC )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(23):  set(_CMAKE_C_PIE_MAY_BE_SUPPORTED_BY_LINKER NO )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(24):  if(NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 3.4 )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(25):  set(CMAKE_C_COMPILE_OPTIONS_PIE -fPIE )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(28):  set(_CMAKE_C_PIE_MAY_BE_SUPPORTED_BY_LINKER YES )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(29):  set(CMAKE_C_LINK_OPTIONS_PIE -fPIE -pie )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(30):  set(CMAKE_C_LINK_OPTIONS_NO_PIE -no-pie )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(32):  if(NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 4.0 )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(33):  set(CMAKE_C_COMPILE_OPTIONS_VISIBILITY -fvisibility= )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(35):  set(CMAKE_SHARED_LIBRARY_C_FLAGS -fPIC )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(36):  set(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS -shared )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(37):  set(CMAKE_C_COMPILE_OPTIONS_SYSROOT --sysroot= )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(39):  set(CMAKE_C_LINKER_WRAPPER_FLAG -Wl, )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(40):  set(CMAKE_C_LINKER_WRAPPER_FLAG_SEP , )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(46):  get_property(_IN_TC GLOBAL PROPERTY IN_TRY_COMPILE )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(47):  if(NOT _IN_TC OR CMAKE_FORCE_DEPFILES )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(51):  set(CMAKE_DEPFILE_FLAGS_C -MD -MT <OBJECT> -MF <DEPFILE> )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(55):  string(APPEND CMAKE_C_FLAGS_INIT   )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(56):  string(APPEND CMAKE_C_FLAGS_DEBUG_INIT  -g )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(57):  string(APPEND CMAKE_C_FLAGS_MINSIZEREL_INIT  -Os -DNDEBUG )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(58):  string(APPEND CMAKE_C_FLAGS_RELEASE_INIT  -O3 -DNDEBUG )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(59):  string(APPEND CMAKE_C_FLAGS_RELWITHDEBINFO_INIT  -O2 -g -DNDEBUG )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(60):  set(CMAKE_C_CREATE_PREPROCESSED_SOURCE <CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -E <SOURCE> > <PREPROCESSED_SOURCE> )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(61):  set(CMAKE_C_CREATE_ASSEMBLY_SOURCE <CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -S <SOURCE> -o <ASSEMBLY_SOURCE> )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(62):  if(NOT APPLE OR NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 4 )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(63):  set(CMAKE_INCLUDE_SYSTEM_FLAG_C -isystem  )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(66):  set(_CMAKE_C_IPO_SUPPORTED_BY_CMAKE YES )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(67):  set(_CMAKE_C_IPO_MAY_BE_SUPPORTED_BY_COMPILER NO )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(72):  if(NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 4.5 )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(73):  set(_CMAKE_C_IPO_MAY_BE_SUPPORTED_BY_COMPILER YES )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(74):  set(__lto_flags -flto )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(76):  if(NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 4.7 )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(80):  list(APPEND __lto_flags -fno-fat-lto-objects )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(83):  set(CMAKE_C_COMPILE_OPTIONS_IPO -flto;-fno-fat-lto-objects )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(92):  set(CMAKE_C_ARCHIVE_CREATE_IPO "/home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc-ar" cr <TARGET> <LINK_FLAGS> <OBJECTS> )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(96):  set(CMAKE_C_ARCHIVE_APPEND_IPO "/home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc-ar" r <TARGET> <LINK_FLAGS> <OBJECTS> )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(100):  set(CMAKE_C_ARCHIVE_FINISH_IPO "/home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc-ranlib" <TARGET> )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(105):  set(CMAKE_C_COMPILER_PREDEFINES_COMMAND /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(106):  if(CMAKE_C_COMPILER_ARG1 )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(111):  list(APPEND CMAKE_C_COMPILER_PREDEFINES_COMMAND -dM -E -c /usr/share/cmake-3.16/Modules/CMakeCXXCompilerABI.cpp )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(113):  set(CMAKE_PCH_EXTENSION .gch )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(114):  if(NOT CMAKE_GENERATOR MATCHES Xcode )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(115):  set(CMAKE_PCH_PROLOGUE #pragma GCC system_header )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(117):  set(CMAKE_C_COMPILE_OPTIONS_USE_PCH -Winvalid-pch -include <PCH_HEADER> )
/usr/share/cmake-3.16/Modules/Compiler/GNU.cmake(118):  set(CMAKE_C_COMPILE_OPTIONS_CREATE_PCH -Winvalid-pch -x c-header -include <PCH_HEADER> )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(4):  if(NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 4.5 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(5):  set(CMAKE_C90_STANDARD_COMPILE_OPTION -std=c90 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(6):  set(CMAKE_C90_EXTENSION_COMPILE_OPTION -std=gnu90 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(12):  if(NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 3.4 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(13):  set(CMAKE_C90_STANDARD__HAS_FULL_SUPPORT ON )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(14):  set(CMAKE_C99_STANDARD_COMPILE_OPTION -std=c99 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(15):  set(CMAKE_C99_EXTENSION_COMPILE_OPTION -std=gnu99 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(16):  set(CMAKE_C99_STANDARD__HAS_FULL_SUPPORT ON )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(19):  if(NOT CMAKE_C_COMPILER_VERSION VERSION_LESS 4.7 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(20):  set(CMAKE_C11_STANDARD_COMPILE_OPTION -std=c11 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(21):  set(CMAKE_C11_EXTENSION_COMPILE_OPTION -std=gnu11 )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(22):  set(CMAKE_C11_STANDARD__HAS_FULL_SUPPORT ON )
/usr/share/cmake-3.16/Modules/Compiler/GNU-C.cmake(28):  __compiler_check_default_language_standard(C 3.4 90 5.0 11 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(33):  set(__std_ver_pairs 3.4;90;5.0;11 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(34):  string(REGEX REPLACE  *; *   __std_ver_pairs 3.4;90;5.0;11 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(35):  string(REGEX MATCHALL [^ ]+ [^ ]+ __std_ver_pairs 3.4 90 5.0 11 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(39):  if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL 3.4 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(40):  if(NOT CMAKE_C_COMPILER_FORCED )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(45):  else()
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(46):  list(REVERSE __std_ver_pairs )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(47):  foreach(__std_ver_pair IN LISTS __std_ver_pairs )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(48):  string(REGEX MATCH ([^ ]+) (.+) __std_ver_pair 5.0 11 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(49):  set(__stdver 5.0 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(50):  set(__std 11 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(51):  if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL __stdver AND NOT DEFINED CMAKE_C_STANDARD_DEFAULT )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(54):  set(CMAKE_C_STANDARD_DEFAULT 11 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(56):  unset(__std )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(57):  unset(__stdver )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(48):  string(REGEX MATCH ([^ ]+) (.+) __std_ver_pair 3.4 90 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(49):  set(__stdver 3.4 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(50):  set(__std 90 )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(51):  if(CMAKE_C_COMPILER_VERSION VERSION_GREATER_EQUAL __stdver AND NOT DEFINED CMAKE_C_STANDARD_DEFAULT )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(56):  unset(__std )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(57):  unset(__stdver )
/usr/share/cmake-3.16/Modules/Compiler/CMakeCommonCompilerMacros.cmake(61):  unset(__std_ver_pairs )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(28):  set(CMAKE_BASE_NAME )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(29):  get_filename_component(CMAKE_BASE_NAME /home/user/hyperscale/buildroot/output/host/bin/csky-linux-gcc NAME_WE )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(30):  if(CMAKE_COMPILER_IS_GNUCC )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(31):  set(CMAKE_BASE_NAME gcc )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(36):  if(CMAKE_SYSTEM_PROCESSOR )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(37):  if(CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(38):  include(Platform/Linux-GNU-C-csky OPTIONAL RESULT_VARIABLE _INCLUDED_FILE )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(40):  if(NOT _INCLUDED_FILE )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(41):  include(Platform/Linux-gcc-csky OPTIONAL )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(47):  if(CMAKE_C_COMPILER_ID )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(48):  include(Platform/Linux-GNU-C OPTIONAL RESULT_VARIABLE _INCLUDED_FILE )
/usr/share/cmake-3.16/Modules/Platform/Linux-GNU-C.cmake(1):  include(Platform/Linux-GNU )
/usr/share/cmake-3.16/Modules/Platform/Linux-GNU.cmake(6):  if(__LINUX_COMPILER_GNU )
/usr/share/cmake-3.16/Modules/Platform/Linux-GNU.cmake(9):  set(__LINUX_COMPILER_GNU 1 )
/usr/share/cmake-3.16/Modules/Platform/Linux-GNU.cmake(11):  macro(__linux_compiler_gnu lang )
/usr/share/cmake-3.16/Modules/Platform/Linux-GNU-C.cmake(2):  __linux_compiler_gnu(C )
/usr/share/cmake-3.16/Modules/Platform/Linux-GNU.cmake(14):  set(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS -rdynamic )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(51):  if(NOT _INCLUDED_FILE )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(57):  if(CMAKE_C_COMPILER_WRAPPER )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(65):  if(NOT _INCLUDED_FILE )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(69):  if(CMAKE_C_SIZEOF_DATA_PTR )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(82):  if(CMAKE_USER_MAKE_RULES_OVERRIDE )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(88):  if(CMAKE_USER_MAKE_RULES_OVERRIDE_C )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(98):  if(NOT CMAKE_MODULE_EXISTS )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(99):  set(CMAKE_SHARED_MODULE_C_FLAGS -fPIC )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(100):  set(CMAKE_SHARED_MODULE_CREATE_C_FLAGS -shared )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(103):  set(CMAKE_C_FLAGS_INIT    )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(105):  cmake_initialize_per_config_variable(CMAKE_C_FLAGS Flags used by the C compiler )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(9):  string(STRIP    _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(10):  set(CMAKE_C_FLAGS  CACHE STRING Flags used by the C compiler during all build types. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(12):  mark_as_advanced(CMAKE_C_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(14):  if(NOT CMAKE_NOT_USING_CONFIG_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(15):  set(_CONFIGS Debug Release MinSizeRel RelWithDebInfo )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(17):  get_property(_GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(18):  if(_GENERATOR_IS_MULTI_CONFIG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(20):  else()
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(21):  if(NOT CMAKE_NO_BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(22):  set(CMAKE_BUILD_TYPE  CACHE STRING Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ... )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(25):  list(APPEND _CONFIGS  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(28):  list(REMOVE_DUPLICATES _CONFIGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(29):  foreach(_BUILD_TYPE IN LISTS _CONFIGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT Debug STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER Debug _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  -g _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_C_FLAGS_DEBUG -g CACHE STRING Flags used by the C compiler during DEBUG builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_C_FLAGS_DEBUG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT Release STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER Release _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  -O3 -DNDEBUG _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_C_FLAGS_RELEASE -O3 -DNDEBUG CACHE STRING Flags used by the C compiler during RELEASE builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_C_FLAGS_RELEASE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT MinSizeRel STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER MinSizeRel _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  -Os -DNDEBUG _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_C_FLAGS_MINSIZEREL -Os -DNDEBUG CACHE STRING Flags used by the C compiler during MINSIZEREL builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_C_FLAGS_MINSIZEREL )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT RelWithDebInfo STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER RelWithDebInfo _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  -O2 -g -DNDEBUG _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_C_FLAGS_RELWITHDEBINFO -O2 -g -DNDEBUG CACHE STRING Flags used by the C compiler during RELWITHDEBINFO builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_C_FLAGS_RELWITHDEBINFO )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(107):  if(CMAKE_C_STANDARD_LIBRARIES_INIT )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(113):  include(CMakeCommonLanguageInclude )
/usr/share/cmake-3.16/Modules/CMakeCommonLanguageInclude.cmake(9):  string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT   )
/usr/share/cmake-3.16/Modules/CMakeCommonLanguageInclude.cmake(10):  string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT   )
/usr/share/cmake-3.16/Modules/CMakeCommonLanguageInclude.cmake(11):  string(APPEND CMAKE_MODULE_LINKER_FLAGS_INIT   )
/usr/share/cmake-3.16/Modules/CMakeCommonLanguageInclude.cmake(13):  cmake_initialize_per_config_variable(CMAKE_EXE_LINKER_FLAGS Flags used by the linker )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(9):  string(STRIP   _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(10):  set(CMAKE_EXE_LINKER_FLAGS  CACHE STRING Flags used by the linker during all build types. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(12):  mark_as_advanced(CMAKE_EXE_LINKER_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(14):  if(NOT CMAKE_NOT_USING_CONFIG_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(15):  set(_CONFIGS Debug Release MinSizeRel RelWithDebInfo )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(17):  get_property(_GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(18):  if(_GENERATOR_IS_MULTI_CONFIG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(20):  else()
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(21):  if(NOT CMAKE_NO_BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(22):  set(CMAKE_BUILD_TYPE  CACHE STRING Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ... )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(25):  list(APPEND _CONFIGS  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(28):  list(REMOVE_DUPLICATES _CONFIGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(29):  foreach(_BUILD_TYPE IN LISTS _CONFIGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT Debug STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER Debug _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_EXE_LINKER_FLAGS_DEBUG  CACHE STRING Flags used by the linker during DEBUG builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_EXE_LINKER_FLAGS_DEBUG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT Release STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER Release _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_EXE_LINKER_FLAGS_RELEASE  CACHE STRING Flags used by the linker during RELEASE builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_EXE_LINKER_FLAGS_RELEASE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT MinSizeRel STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER MinSizeRel _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL  CACHE STRING Flags used by the linker during MINSIZEREL builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT RelWithDebInfo STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER RelWithDebInfo _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO  CACHE STRING Flags used by the linker during RELWITHDEBINFO builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO )
/usr/share/cmake-3.16/Modules/CMakeCommonLanguageInclude.cmake(14):  cmake_initialize_per_config_variable(CMAKE_SHARED_LINKER_FLAGS Flags used by the linker during the creation of shared libraries )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(9):  string(STRIP   _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(10):  set(CMAKE_SHARED_LINKER_FLAGS  CACHE STRING Flags used by the linker during the creation of shared libraries during all build types. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(12):  mark_as_advanced(CMAKE_SHARED_LINKER_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(14):  if(NOT CMAKE_NOT_USING_CONFIG_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(15):  set(_CONFIGS Debug Release MinSizeRel RelWithDebInfo )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(17):  get_property(_GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(18):  if(_GENERATOR_IS_MULTI_CONFIG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(20):  else()
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(21):  if(NOT CMAKE_NO_BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(22):  set(CMAKE_BUILD_TYPE  CACHE STRING Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ... )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(25):  list(APPEND _CONFIGS  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(28):  list(REMOVE_DUPLICATES _CONFIGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(29):  foreach(_BUILD_TYPE IN LISTS _CONFIGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT Debug STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER Debug _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_SHARED_LINKER_FLAGS_DEBUG  CACHE STRING Flags used by the linker during the creation of shared libraries during DEBUG builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_SHARED_LINKER_FLAGS_DEBUG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT Release STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER Release _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_SHARED_LINKER_FLAGS_RELEASE  CACHE STRING Flags used by the linker during the creation of shared libraries during RELEASE builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_SHARED_LINKER_FLAGS_RELEASE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT MinSizeRel STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER MinSizeRel _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL  CACHE STRING Flags used by the linker during the creation of shared libraries during MINSIZEREL builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT RelWithDebInfo STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER RelWithDebInfo _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO  CACHE STRING Flags used by the linker during the creation of shared libraries during RELWITHDEBINFO builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO )
/usr/share/cmake-3.16/Modules/CMakeCommonLanguageInclude.cmake(15):  cmake_initialize_per_config_variable(CMAKE_MODULE_LINKER_FLAGS Flags used by the linker during the creation of modules )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(9):  string(STRIP   _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(10):  set(CMAKE_MODULE_LINKER_FLAGS  CACHE STRING Flags used by the linker during the creation of modules during all build types. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(12):  mark_as_advanced(CMAKE_MODULE_LINKER_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(14):  if(NOT CMAKE_NOT_USING_CONFIG_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(15):  set(_CONFIGS Debug Release MinSizeRel RelWithDebInfo )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(17):  get_property(_GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(18):  if(_GENERATOR_IS_MULTI_CONFIG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(20):  else()
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(21):  if(NOT CMAKE_NO_BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(22):  set(CMAKE_BUILD_TYPE  CACHE STRING Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ... )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(25):  list(APPEND _CONFIGS  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(28):  list(REMOVE_DUPLICATES _CONFIGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(29):  foreach(_BUILD_TYPE IN LISTS _CONFIGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT Debug STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER Debug _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_MODULE_LINKER_FLAGS_DEBUG  CACHE STRING Flags used by the linker during the creation of modules during DEBUG builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_MODULE_LINKER_FLAGS_DEBUG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT Release STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER Release _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_MODULE_LINKER_FLAGS_RELEASE  CACHE STRING Flags used by the linker during the creation of modules during RELEASE builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_MODULE_LINKER_FLAGS_RELEASE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT MinSizeRel STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER MinSizeRel _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL  CACHE STRING Flags used by the linker during the creation of modules during MINSIZEREL builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT RelWithDebInfo STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER RelWithDebInfo _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO  CACHE STRING Flags used by the linker during the creation of modules during RELWITHDEBINFO builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO )
/usr/share/cmake-3.16/Modules/CMakeCommonLanguageInclude.cmake(16):  cmake_initialize_per_config_variable(CMAKE_STATIC_LINKER_FLAGS Flags used by the linker during the creation of static libraries )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(9):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(10):  set(CMAKE_STATIC_LINKER_FLAGS  CACHE STRING Flags used by the linker during the creation of static libraries during all build types. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(12):  mark_as_advanced(CMAKE_STATIC_LINKER_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(14):  if(NOT CMAKE_NOT_USING_CONFIG_FLAGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(15):  set(_CONFIGS Debug Release MinSizeRel RelWithDebInfo )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(17):  get_property(_GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(18):  if(_GENERATOR_IS_MULTI_CONFIG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(20):  else()
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(21):  if(NOT CMAKE_NO_BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(22):  set(CMAKE_BUILD_TYPE  CACHE STRING Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel ... )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(25):  list(APPEND _CONFIGS  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(28):  list(REMOVE_DUPLICATES _CONFIGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(29):  foreach(_BUILD_TYPE IN LISTS _CONFIGS )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT Debug STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER Debug _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_STATIC_LINKER_FLAGS_DEBUG  CACHE STRING Flags used by the linker during the creation of static libraries during DEBUG builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_STATIC_LINKER_FLAGS_DEBUG )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT Release STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER Release _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_STATIC_LINKER_FLAGS_RELEASE  CACHE STRING Flags used by the linker during the creation of static libraries during RELEASE builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_STATIC_LINKER_FLAGS_RELEASE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT MinSizeRel STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER MinSizeRel _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL  CACHE STRING Flags used by the linker during the creation of static libraries during MINSIZEREL builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(30):  if(NOT RelWithDebInfo STREQUAL  )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(31):  string(TOUPPER RelWithDebInfo _BUILD_TYPE )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(32):  string(STRIP  _INIT )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(33):  set(CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO  CACHE STRING Flags used by the linker during the creation of static libraries during RELWITHDEBINFO builds. )
/usr/share/cmake-3.16/Modules/CMakeInitializeConfigs.cmake(35):  mark_as_advanced(CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO )
/usr/share/cmake-3.16/Modules/CMakeCommonLanguageInclude.cmake(19):  set(CMAKE_BUILD_TOOL /usr/bin/make )
/usr/share/cmake-3.16/Modules/CMakeCommonLanguageInclude.cmake(21):  mark_as_advanced(CMAKE_VERBOSE_MAKEFILE )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(143):  if(NOT CMAKE_C_CREATE_SHARED_LIBRARY )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(144):  set(CMAKE_C_CREATE_SHARED_LIBRARY <CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES> )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(149):  if(NOT CMAKE_C_CREATE_SHARED_MODULE )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(150):  set(CMAKE_C_CREATE_SHARED_MODULE <CMAKE_C_COMPILER> <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES> )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(155):  if(NOT DEFINED CMAKE_C_ARCHIVE_CREATE )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(156):  set(CMAKE_C_ARCHIVE_CREATE <CMAKE_AR> qc <TARGET> <LINK_FLAGS> <OBJECTS> )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(158):  if(NOT DEFINED CMAKE_C_ARCHIVE_APPEND )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(159):  set(CMAKE_C_ARCHIVE_APPEND <CMAKE_AR> q  <TARGET> <LINK_FLAGS> <OBJECTS> )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(161):  if(NOT DEFINED CMAKE_C_ARCHIVE_FINISH )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(162):  set(CMAKE_C_ARCHIVE_FINISH <CMAKE_RANLIB> <TARGET> )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(166):  if(NOT CMAKE_C_COMPILE_OBJECT )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(167):  set(CMAKE_C_COMPILE_OBJECT <CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT>   -c <SOURCE> )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(171):  if(NOT CMAKE_C_LINK_EXECUTABLE )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(172):  set(CMAKE_C_LINK_EXECUTABLE <CMAKE_C_COMPILER> <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS>  -o <TARGET> <LINK_LIBRARIES> )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(176):  if(NOT CMAKE_EXECUTABLE_RUNTIME_C_FLAG )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(177):  set(CMAKE_EXECUTABLE_RUNTIME_C_FLAG -Wl,-rpath, )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(180):  if(NOT CMAKE_EXECUTABLE_RUNTIME_C_FLAG_SEP )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(181):  set(CMAKE_EXECUTABLE_RUNTIME_C_FLAG_SEP : )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(184):  if(NOT CMAKE_EXECUTABLE_RPATH_LINK_C_FLAG )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(185):  set(CMAKE_EXECUTABLE_RPATH_LINK_C_FLAG -Wl,-rpath-link, )
/usr/share/cmake-3.16/Modules/CMakeCInformation.cmake(188):  set(CMAKE_C_INFORMATION_LOADED 1 )
/usr/share/cmake-3.16/Modules/CMakeTestCCompiler.cmake(5):  if(CMAKE_C_COMPILER_FORCED )
/usr/share/cmake-3.16/Modules/CMakeTestCCompiler.cmake(8):  set(CMAKE_C_COMPILER_WORKS TRUE )
/usr/share/cmake-3.16/Modules/CMakeTestCCompiler.cmake(9):  return()
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(8):  cmake_policy(SET CMP0000 NEW )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(10):  set(PACKAGE_FOUND FALSE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(11):  set(_packageName bash-completion )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(12):  string(TOUPPER bash-completion PACKAGE_NAME )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(14):  while(TRUE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(15):  find_package(bash-completion QUIET COMPONENTS  )
/usr/share/cmake/bash-completion/bash-completion-config-version.cmake(1):  set(PACKAGE_VERSION 2.10 )
/usr/share/cmake/bash-completion/bash-completion-config-version.cmake(2):  if(NOT  VERSION_GREATER 2.10 )
/usr/share/cmake/bash-completion/bash-completion-config.cmake(4):  set(BASH_COMPLETION_VERSION 2.10 )
/usr/share/cmake/bash-completion/bash-completion-config.cmake(6):  set(BASH_COMPLETION_PREFIX /usr )
/usr/share/cmake/bash-completion/bash-completion-config.cmake(8):  set(BASH_COMPLETION_COMPATDIR /etc/bash_completion.d )
/usr/share/cmake/bash-completion/bash-completion-config.cmake(9):  set(BASH_COMPLETION_COMPLETIONSDIR /usr/share/bash-completion/completions )
/usr/share/cmake/bash-completion/bash-completion-config.cmake(10):  set(BASH_COMPLETION_HELPERSDIR /usr/share/bash-completion/helpers )
/usr/share/cmake/bash-completion/bash-completion-config.cmake(12):  set(BASH_COMPLETION_FOUND TRUE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(18):  if(bash-completion_FOUND OR BASH-COMPLETION_FOUND OR i386-linux-gnu;x86_64-linux-gnu STREQUAL  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(19):  break()
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(26):  if(bash-completion_FOUND OR BASH-COMPLETION_FOUND )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(27):  set(PACKAGE_FOUND TRUE )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(34):  if(NOT DEFINED PACKAGE_VERSION )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(35):  if(DEFINED bash-completion_VERSION )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(36):  set(PACKAGE_VERSION 2.10 )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(51):  set(libs )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(52):  if(DEFINED bash-completion_LIBRARIES )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(54):  elseif(DEFINED BASH-COMPLETION_LIBRARIES )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(56):  elseif(DEFINED bash-completion_LIBS )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(58):  elseif(DEFINED BASH-COMPLETION_LIBS )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(69):  set(includes )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(70):  if(DEFINED bash-completion_INCLUDE_DIRS )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(72):  elseif(DEFINED BASH-COMPLETION_INCLUDE_DIRS )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(74):  elseif(DEFINED bash-completion_INCLUDES )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(76):  elseif(DEFINED BASH-COMPLETION_INCLUDES )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(78):  elseif(DEFINED bash-completion_INCLUDE_DIR )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(80):  elseif(DEFINED BASH-COMPLETION_INCLUDE_DIR )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(87):  set(definitions )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(88):  if(DEFINED bash-completion_DEFINITIONS )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(90):  elseif(DEFINED BASH-COMPLETION_DEFINITIONS )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(94):  set(PACKAGE_INCLUDE_DIRS  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(95):  set(PACKAGE_DEFINITIONS  )
/home/user/hyperscale/buildroot/output/build/gstreamer1-1.18.1/build/meson-private/cmake_bash-completion/CMakeLists.txt(96):  set(PACKAGE_LIBRARIES  )
